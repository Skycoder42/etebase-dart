// ignore_for_file: require_trailing_commas, non_constant_identifier_names, prefer_expression_function_bodies, lines_longer_than_80_chars, comment_references, avoid_positional_boolean_parameters, camel_case_types, public_member_api_docs
// AUTO GENERATED FILE, DO NOT EDIT.
//
// Generated by `package:ffigen`.
// ignore_for_file: type=lint
import 'dart:ffi' as ffi;

/// Bindings for libetebase
class LibEtebaseFFI {
  /// Holds the symbol lookup function.
  final ffi.Pointer<T> Function<T extends ffi.NativeType>(String symbolName)
      _lookup;

  /// The symbols are looked up in [dynamicLibrary].
  LibEtebaseFFI(ffi.DynamicLibrary dynamicLibrary)
      : _lookup = dynamicLibrary.lookup;

  /// The symbols are looked up with [lookup].
  LibEtebaseFFI.fromLookup(
      ffi.Pointer<T> Function<T extends ffi.NativeType>(String symbolName)
          lookup)
      : _lookup = lookup;

  late final ffi.Pointer<ffi.UintPtr> _ETEBASE_UTILS_PRETTY_FINGERPRINT_SIZE =
      _lookup<ffi.UintPtr>('ETEBASE_UTILS_PRETTY_FINGERPRINT_SIZE');

  int get ETEBASE_UTILS_PRETTY_FINGERPRINT_SIZE =>
      _ETEBASE_UTILS_PRETTY_FINGERPRINT_SIZE.value;

  /// Get the error code
  ///
  /// Call this immediately after a failed API call
  int etebase_error_get_code() {
    return _etebase_error_get_code();
  }

  late final _etebase_error_get_codePtr =
      _lookup<ffi.NativeFunction<EtebaseErrorCode Function()>>(
          'etebase_error_get_code');
  late final _etebase_error_get_code =
      _etebase_error_get_codePtr.asFunction<int Function()>();

  /// Get the error message
  ///
  /// Call this immediately after a failed API call
  ffi.Pointer<ffi.Char> etebase_error_get_message() {
    return _etebase_error_get_message();
  }

  late final _etebase_error_get_messagePtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<ffi.Char> Function()>>(
          'etebase_error_get_message');
  late final _etebase_error_get_message = _etebase_error_get_messagePtr
      .asFunction<ffi.Pointer<ffi.Char> Function()>();

  /// The URL of the main hosted server
  ffi.Pointer<ffi.Char> etebase_get_default_server_url() {
    return _etebase_get_default_server_url();
  }

  late final _etebase_get_default_server_urlPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<ffi.Char> Function()>>(
          'etebase_get_default_server_url');
  late final _etebase_get_default_server_url =
      _etebase_get_default_server_urlPtr
          .asFunction<ffi.Pointer<ffi.Char> Function()>();

  /// Convert a Base64 URL encoded string to a buffer
  ///
  /// @param string the Base64 URL encoded string
  /// @param[out] buf the output byte buffer
  /// @param buf_maxlen the maximum number of bytes to be written to buf
  /// @param[out] buf_len variable to store the buffer length in
  int etebase_utils_from_base64(
    ffi.Pointer<ffi.Char> string,
    ffi.Pointer<ffi.Void> buf,
    int buf_maxlen,
    ffi.Pointer<ffi.UintPtr> buf_len,
  ) {
    return _etebase_utils_from_base64(
      string,
      buf,
      buf_maxlen,
      buf_len,
    );
  }

  late final _etebase_utils_from_base64Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(
              ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Void>,
              ffi.UintPtr,
              ffi.Pointer<ffi.UintPtr>)>>('etebase_utils_from_base64');
  late final _etebase_utils_from_base64 =
      _etebase_utils_from_base64Ptr.asFunction<
          int Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Void>, int,
              ffi.Pointer<ffi.UintPtr>)>();

  /// Convert a buffer to a Base64 URL encoded string
  ///
  /// @param bytes the buffer to convert
  /// @param bytes_size the size of the input buffer
  /// @param[out] out the output string
  /// @param out_maxlen the maximum length of string to be written
  int etebase_utils_to_base64(
    ffi.Pointer<ffi.Void> bytes,
    int bytes_size,
    ffi.Pointer<ffi.Char> out,
    int out_maxlen,
  ) {
    return _etebase_utils_to_base64(
      bytes,
      bytes_size,
      out,
      out_maxlen,
    );
  }

  late final _etebase_utils_to_base64Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Pointer<ffi.Void>, ffi.UintPtr,
              ffi.Pointer<ffi.Char>, ffi.UintPtr)>>('etebase_utils_to_base64');
  late final _etebase_utils_to_base64 = _etebase_utils_to_base64Ptr.asFunction<
      int Function(ffi.Pointer<ffi.Void>, int, ffi.Pointer<ffi.Char>, int)>();

  /// Return a buffer filled with cryptographically random bytes
  ///
  /// @param[out] buf the output byte buffer
  /// @param size the size of the returned buffer
  int etebase_utils_randombytes(
    ffi.Pointer<ffi.Void> buf,
    int size,
  ) {
    return _etebase_utils_randombytes(
      buf,
      size,
    );
  }

  late final _etebase_utils_randombytesPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Pointer<ffi.Void>,
              ffi.UintPtr)>>('etebase_utils_randombytes');
  late final _etebase_utils_randombytes = _etebase_utils_randombytesPtr
      .asFunction<int Function(ffi.Pointer<ffi.Void>, int)>();

  /// Return a pretty formatted fingerprint of the content
  ///
  /// For example:
  /// ```
  /// 45680   71497   88570   93128
  /// 19189   84243   25687   20837
  /// 47924   46071   54113   18789
  /// ```
  ///
  /// @param content the content to create a fingerprint for
  /// @param content_size the size of the content buffer
  /// @param[out] buf the output byte buffer
  int etebase_utils_pretty_fingerprint(
    ffi.Pointer<ffi.Void> content,
    int content_size,
    ffi.Pointer<ffi.Char> buf,
  ) {
    return _etebase_utils_pretty_fingerprint(
      content,
      content_size,
      buf,
    );
  }

  late final _etebase_utils_pretty_fingerprintPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Pointer<ffi.Void>, ffi.UintPtr,
              ffi.Pointer<ffi.Char>)>>('etebase_utils_pretty_fingerprint');
  late final _etebase_utils_pretty_fingerprint =
      _etebase_utils_pretty_fingerprintPtr.asFunction<
          int Function(ffi.Pointer<ffi.Void>, int, ffi.Pointer<ffi.Char>)>();

  ffi.Pointer<EtebaseClient> etebase_client_new(
    ffi.Pointer<ffi.Char> client_name,
    ffi.Pointer<ffi.Char> server_url,
  ) {
    return _etebase_client_new(
      client_name,
      server_url,
    );
  }

  late final _etebase_client_newPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<EtebaseClient> Function(ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Char>)>>('etebase_client_new');
  late final _etebase_client_new = _etebase_client_newPtr.asFunction<
      ffi.Pointer<EtebaseClient> Function(
          ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>();

  int etebase_client_set_server_url(
    ffi.Pointer<EtebaseClient> this_,
    ffi.Pointer<ffi.Char> server_url,
  ) {
    return _etebase_client_set_server_url(
      this_,
      server_url,
    );
  }

  late final _etebase_client_set_server_urlPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Pointer<EtebaseClient>,
              ffi.Pointer<ffi.Char>)>>('etebase_client_set_server_url');
  late final _etebase_client_set_server_url =
      _etebase_client_set_server_urlPtr.asFunction<
          int Function(ffi.Pointer<EtebaseClient>, ffi.Pointer<ffi.Char>)>();

  /// Returns 0 if client is pointing an etebase server, 1 if not, -1 on error
  ///
  /// @param client the object handle
  int etebase_client_check_etebase_server(
    ffi.Pointer<EtebaseClient> client,
  ) {
    return _etebase_client_check_etebase_server(
      client,
    );
  }

  late final _etebase_client_check_etebase_serverPtr = _lookup<
          ffi.NativeFunction<ffi.Int32 Function(ffi.Pointer<EtebaseClient>)>>(
      'etebase_client_check_etebase_server');
  late final _etebase_client_check_etebase_server =
      _etebase_client_check_etebase_serverPtr
          .asFunction<int Function(ffi.Pointer<EtebaseClient>)>();

  /// Destroy the object
  ///
  /// @param this_ the object handle
  void etebase_client_destroy(
    ffi.Pointer<EtebaseClient> this_,
  ) {
    return _etebase_client_destroy(
      this_,
    );
  }

  late final _etebase_client_destroyPtr = _lookup<
          ffi.NativeFunction<ffi.Void Function(ffi.Pointer<EtebaseClient>)>>(
      'etebase_client_destroy');
  late final _etebase_client_destroy = _etebase_client_destroyPtr
      .asFunction<void Function(ffi.Pointer<EtebaseClient>)>();

  /// Return a new user instance
  ///
  /// Should be destroyed with `etebase_user_destroy`
  ///
  /// @param username the user's username
  /// @param email the user's email
  ffi.Pointer<EtebaseUser> etebase_user_new(
    ffi.Pointer<ffi.Char> username,
    ffi.Pointer<ffi.Char> email,
  ) {
    return _etebase_user_new(
      username,
      email,
    );
  }

  late final _etebase_user_newPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<EtebaseUser> Function(ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Char>)>>('etebase_user_new');
  late final _etebase_user_new = _etebase_user_newPtr.asFunction<
      ffi.Pointer<EtebaseUser> Function(
          ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>();

  /// Set the username
  ///
  /// @param this_ the object handle
  /// @param username the user's username
  void etebase_user_set_username(
    ffi.Pointer<EtebaseUser> this_,
    ffi.Pointer<ffi.Char> username,
  ) {
    return _etebase_user_set_username(
      this_,
      username,
    );
  }

  late final _etebase_user_set_usernamePtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<EtebaseUser>,
              ffi.Pointer<ffi.Char>)>>('etebase_user_set_username');
  late final _etebase_user_set_username =
      _etebase_user_set_usernamePtr.asFunction<
          void Function(ffi.Pointer<EtebaseUser>, ffi.Pointer<ffi.Char>)>();

  /// Get the username
  ///
  /// @param this_ the object handle
  ffi.Pointer<ffi.Char> etebase_user_get_username(
    ffi.Pointer<EtebaseUser> this_,
  ) {
    return _etebase_user_get_username(
      this_,
    );
  }

  late final _etebase_user_get_usernamePtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(
              ffi.Pointer<EtebaseUser>)>>('etebase_user_get_username');
  late final _etebase_user_get_username = _etebase_user_get_usernamePtr
      .asFunction<ffi.Pointer<ffi.Char> Function(ffi.Pointer<EtebaseUser>)>();

  /// Set the email address
  ///
  /// @param this_ the object handle
  /// @param email the user's email address
  void etebase_user_set_email(
    ffi.Pointer<EtebaseUser> this_,
    ffi.Pointer<ffi.Char> email,
  ) {
    return _etebase_user_set_email(
      this_,
      email,
    );
  }

  late final _etebase_user_set_emailPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<EtebaseUser>,
              ffi.Pointer<ffi.Char>)>>('etebase_user_set_email');
  late final _etebase_user_set_email = _etebase_user_set_emailPtr.asFunction<
      void Function(ffi.Pointer<EtebaseUser>, ffi.Pointer<ffi.Char>)>();

  /// Get the email address
  ///
  /// @param this_ the object handle
  ffi.Pointer<ffi.Char> etebase_user_get_email(
    ffi.Pointer<EtebaseUser> this_,
  ) {
    return _etebase_user_get_email(
      this_,
    );
  }

  late final _etebase_user_get_emailPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(
              ffi.Pointer<EtebaseUser>)>>('etebase_user_get_email');
  late final _etebase_user_get_email = _etebase_user_get_emailPtr
      .asFunction<ffi.Pointer<ffi.Char> Function(ffi.Pointer<EtebaseUser>)>();

  /// Destroy the object
  ///
  /// @param this_ the object handle
  void etebase_user_destroy(
    ffi.Pointer<EtebaseUser> this_,
  ) {
    return _etebase_user_destroy(
      this_,
    );
  }

  late final _etebase_user_destroyPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<EtebaseUser>)>>(
          'etebase_user_destroy');
  late final _etebase_user_destroy = _etebase_user_destroyPtr
      .asFunction<void Function(ffi.Pointer<EtebaseUser>)>();

  /// Login a user and return a handle to an `EtebaseAccount` object
  ///
  /// @param client the already setup `EtebaseClient` object
  /// @param username the user's username. This is not the same as the user's email.
  /// @param password the user's password
  ffi.Pointer<EtebaseAccount> etebase_account_login(
    ffi.Pointer<EtebaseClient> client,
    ffi.Pointer<ffi.Char> username,
    ffi.Pointer<ffi.Char> password,
  ) {
    return _etebase_account_login(
      client,
      username,
      password,
    );
  }

  late final _etebase_account_loginPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<EtebaseAccount> Function(
              ffi.Pointer<EtebaseClient>,
              ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Char>)>>('etebase_account_login');
  late final _etebase_account_login = _etebase_account_loginPtr.asFunction<
      ffi.Pointer<EtebaseAccount> Function(ffi.Pointer<EtebaseClient>,
          ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>();

  /// Signup a new user account and return a handle to it
  ///
  /// @param client the already setup `EtebaseClient` object
  /// @param user the already setup `EtebaseUser` object
  /// @param password the password to signup with
  ffi.Pointer<EtebaseAccount> etebase_account_signup(
    ffi.Pointer<EtebaseClient> client,
    ffi.Pointer<EtebaseUser> user,
    ffi.Pointer<ffi.Char> password,
  ) {
    return _etebase_account_signup(
      client,
      user,
      password,
    );
  }

  late final _etebase_account_signupPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<EtebaseAccount> Function(
              ffi.Pointer<EtebaseClient>,
              ffi.Pointer<EtebaseUser>,
              ffi.Pointer<ffi.Char>)>>('etebase_account_signup');
  late final _etebase_account_signup = _etebase_account_signupPtr.asFunction<
      ffi.Pointer<EtebaseAccount> Function(ffi.Pointer<EtebaseClient>,
          ffi.Pointer<EtebaseUser>, ffi.Pointer<ffi.Char>)>();

  /// Fetch a new auth token for the account and update the `EtebaseAccount` object with it
  ///
  /// @param this_ the object handle
  int etebase_account_fetch_token(
    ffi.Pointer<EtebaseAccount> this_,
  ) {
    return _etebase_account_fetch_token(
      this_,
    );
  }

  late final _etebase_account_fetch_tokenPtr = _lookup<
          ffi.NativeFunction<ffi.Int32 Function(ffi.Pointer<EtebaseAccount>)>>(
      'etebase_account_fetch_token');
  late final _etebase_account_fetch_token = _etebase_account_fetch_tokenPtr
      .asFunction<int Function(ffi.Pointer<EtebaseAccount>)>();

  /// Fetch the link to the user dashboard of the account
  ///
  /// @param this_ the object handle
  ffi.Pointer<ffi.Char> etebase_account_fetch_dashboard_url(
    ffi.Pointer<EtebaseAccount> this_,
  ) {
    return _etebase_account_fetch_dashboard_url(
      this_,
    );
  }

  late final _etebase_account_fetch_dashboard_urlPtr = _lookup<
          ffi.NativeFunction<
              ffi.Pointer<ffi.Char> Function(ffi.Pointer<EtebaseAccount>)>>(
      'etebase_account_fetch_dashboard_url');
  late final _etebase_account_fetch_dashboard_url =
      _etebase_account_fetch_dashboard_urlPtr.asFunction<
          ffi.Pointer<ffi.Char> Function(ffi.Pointer<EtebaseAccount>)>();

  /// Change the server URL for this account handle
  ///
  /// @param this_ the object handle
  /// @param server_url the new server URL to be set
  int etebase_account_force_server_url(
    ffi.Pointer<EtebaseAccount> this_,
    ffi.Pointer<ffi.Char> server_url,
  ) {
    return _etebase_account_force_server_url(
      this_,
      server_url,
    );
  }

  late final _etebase_account_force_server_urlPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Pointer<EtebaseAccount>,
              ffi.Pointer<ffi.Char>)>>('etebase_account_force_server_url');
  late final _etebase_account_force_server_url =
      _etebase_account_force_server_urlPtr.asFunction<
          int Function(ffi.Pointer<EtebaseAccount>, ffi.Pointer<ffi.Char>)>();

  /// Change the user's login password
  ///
  /// @param this_ the object handle
  /// @param password the new password to be set
  int etebase_account_change_password(
    ffi.Pointer<EtebaseAccount> this_,
    ffi.Pointer<ffi.Char> password,
  ) {
    return _etebase_account_change_password(
      this_,
      password,
    );
  }

  late final _etebase_account_change_passwordPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Pointer<EtebaseAccount>,
              ffi.Pointer<ffi.Char>)>>('etebase_account_change_password');
  late final _etebase_account_change_password =
      _etebase_account_change_passwordPtr.asFunction<
          int Function(ffi.Pointer<EtebaseAccount>, ffi.Pointer<ffi.Char>)>();

  /// Logout the user from the current session and invalidate the authentication token
  ///
  /// @param this_ the object handle
  int etebase_account_logout(
    ffi.Pointer<EtebaseAccount> this_,
  ) {
    return _etebase_account_logout(
      this_,
    );
  }

  late final _etebase_account_logoutPtr = _lookup<
          ffi.NativeFunction<ffi.Int32 Function(ffi.Pointer<EtebaseAccount>)>>(
      'etebase_account_logout');
  late final _etebase_account_logout = _etebase_account_logoutPtr
      .asFunction<int Function(ffi.Pointer<EtebaseAccount>)>();

  /// Return a `EtebaseCollectionManager` for creating, fetching and uploading collections
  ///
  /// @param this_ the object handle
  ffi.Pointer<EtebaseCollectionManager> etebase_account_get_collection_manager(
    ffi.Pointer<EtebaseAccount> this_,
  ) {
    return _etebase_account_get_collection_manager(
      this_,
    );
  }

  late final _etebase_account_get_collection_managerPtr = _lookup<
          ffi.NativeFunction<
              ffi.Pointer<EtebaseCollectionManager> Function(
                  ffi.Pointer<EtebaseAccount>)>>(
      'etebase_account_get_collection_manager');
  late final _etebase_account_get_collection_manager =
      _etebase_account_get_collection_managerPtr.asFunction<
          ffi.Pointer<EtebaseCollectionManager> Function(
              ffi.Pointer<EtebaseAccount>)>();

  /// Return a `EtebaseCollectionInvitationManager` for managing collection invitations
  ///
  /// @param this_ the object handle
  ffi.Pointer<EtebaseCollectionInvitationManager>
      etebase_account_get_invitation_manager(
    ffi.Pointer<EtebaseAccount> this_,
  ) {
    return _etebase_account_get_invitation_manager(
      this_,
    );
  }

  late final _etebase_account_get_invitation_managerPtr = _lookup<
          ffi.NativeFunction<
              ffi.Pointer<EtebaseCollectionInvitationManager> Function(
                  ffi.Pointer<EtebaseAccount>)>>(
      'etebase_account_get_invitation_manager');
  late final _etebase_account_get_invitation_manager =
      _etebase_account_get_invitation_managerPtr.asFunction<
          ffi.Pointer<EtebaseCollectionInvitationManager> Function(
              ffi.Pointer<EtebaseAccount>)>();

  /// Save the account object to a string for restoring it later using `etebase_account_restore`
  ///
  /// @param this_ the object handle
  /// @param encryption_key used to encrypt the returned account string to enhance security
  /// @param encryption_key_size size of the encryption_key
  ffi.Pointer<ffi.Char> etebase_account_save(
    ffi.Pointer<EtebaseAccount> this_,
    ffi.Pointer<ffi.Void> encryption_key,
    int encryption_key_size,
  ) {
    return _etebase_account_save(
      this_,
      encryption_key,
      encryption_key_size,
    );
  }

  late final _etebase_account_savePtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(ffi.Pointer<EtebaseAccount>,
              ffi.Pointer<ffi.Void>, ffi.UintPtr)>>('etebase_account_save');
  late final _etebase_account_save = _etebase_account_savePtr.asFunction<
      ffi.Pointer<ffi.Char> Function(
          ffi.Pointer<EtebaseAccount>, ffi.Pointer<ffi.Void>, int)>();

  /// Restore and return the account object from the string obtained using `etebase_account_save`
  ///
  /// @param client the already setup `EtebaseClient` object
  /// @param account_data_stored the stored account string
  /// @param encryption_key the same encryption key passed to `etebase_account_save` while saving the account
  /// @param encryption_key_size size of the encryption_key
  ffi.Pointer<EtebaseAccount> etebase_account_restore(
    ffi.Pointer<EtebaseClient> client,
    ffi.Pointer<ffi.Char> account_data_stored,
    ffi.Pointer<ffi.Void> encryption_key,
    int encryption_key_size,
  ) {
    return _etebase_account_restore(
      client,
      account_data_stored,
      encryption_key,
      encryption_key_size,
    );
  }

  late final _etebase_account_restorePtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<EtebaseAccount> Function(
              ffi.Pointer<EtebaseClient>,
              ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Void>,
              ffi.UintPtr)>>('etebase_account_restore');
  late final _etebase_account_restore = _etebase_account_restorePtr.asFunction<
      ffi.Pointer<EtebaseAccount> Function(ffi.Pointer<EtebaseClient>,
          ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Void>, int)>();

  /// Destroy the object
  ///
  /// @param this_ the object handle
  void etebase_account_destroy(
    ffi.Pointer<EtebaseAccount> this_,
  ) {
    return _etebase_account_destroy(
      this_,
    );
  }

  late final _etebase_account_destroyPtr = _lookup<
          ffi.NativeFunction<ffi.Void Function(ffi.Pointer<EtebaseAccount>)>>(
      'etebase_account_destroy');
  late final _etebase_account_destroy = _etebase_account_destroyPtr
      .asFunction<void Function(ffi.Pointer<EtebaseAccount>)>();

  /// The uid of the removed collection
  ///
  /// @param this_ the object handle
  ffi.Pointer<ffi.Char> etebase_removed_collection_get_uid(
    ffi.Pointer<EtebaseRemovedCollection> this_,
  ) {
    return _etebase_removed_collection_get_uid(
      this_,
    );
  }

  late final _etebase_removed_collection_get_uidPtr = _lookup<
          ffi.NativeFunction<
              ffi.Pointer<ffi.Char> Function(
                  ffi.Pointer<EtebaseRemovedCollection>)>>(
      'etebase_removed_collection_get_uid');
  late final _etebase_removed_collection_get_uid =
      _etebase_removed_collection_get_uidPtr.asFunction<
          ffi.Pointer<ffi.Char> Function(
              ffi.Pointer<EtebaseRemovedCollection>)>();

  /// Destroy the object
  ///
  /// @param this_ the object handle
  void etebase_removed_collection_destroy(
    ffi.Pointer<EtebaseRemovedCollection> this_,
  ) {
    return _etebase_removed_collection_destroy(
      this_,
    );
  }

  late final _etebase_removed_collection_destroyPtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(ffi.Pointer<EtebaseRemovedCollection>)>>(
      'etebase_removed_collection_destroy');
  late final _etebase_removed_collection_destroy =
      _etebase_removed_collection_destroyPtr
          .asFunction<void Function(ffi.Pointer<EtebaseRemovedCollection>)>();

  /// Sync token for the list response
  ///
  /// @param this_ the object handle
  ffi.Pointer<ffi.Char> etebase_collection_list_response_get_stoken(
    ffi.Pointer<EtebaseCollectionListResponse> this_,
  ) {
    return _etebase_collection_list_response_get_stoken(
      this_,
    );
  }

  late final _etebase_collection_list_response_get_stokenPtr = _lookup<
          ffi.NativeFunction<
              ffi.Pointer<ffi.Char> Function(
                  ffi.Pointer<EtebaseCollectionListResponse>)>>(
      'etebase_collection_list_response_get_stoken');
  late final _etebase_collection_list_response_get_stoken =
      _etebase_collection_list_response_get_stokenPtr.asFunction<
          ffi.Pointer<ffi.Char> Function(
              ffi.Pointer<EtebaseCollectionListResponse>)>();

  /// List of collections included in the response
  ///
  /// @param this_ the object handle
  /// @param[out] data the array to store the collections in
  int etebase_collection_list_response_get_data(
    ffi.Pointer<EtebaseCollectionListResponse> this_,
    ffi.Pointer<ffi.Pointer<EtebaseCollection>> data,
  ) {
    return _etebase_collection_list_response_get_data(
      this_,
      data,
    );
  }

  late final _etebase_collection_list_response_get_dataPtr = _lookup<
          ffi.NativeFunction<
              ffi.Int32 Function(ffi.Pointer<EtebaseCollectionListResponse>,
                  ffi.Pointer<ffi.Pointer<EtebaseCollection>>)>>(
      'etebase_collection_list_response_get_data');
  late final _etebase_collection_list_response_get_data =
      _etebase_collection_list_response_get_dataPtr.asFunction<
          int Function(ffi.Pointer<EtebaseCollectionListResponse>,
              ffi.Pointer<ffi.Pointer<EtebaseCollection>>)>();

  /// The number of collections included in the response
  ///
  /// @param this_ the object handle
  int etebase_collection_list_response_get_data_length(
    ffi.Pointer<EtebaseCollectionListResponse> this_,
  ) {
    return _etebase_collection_list_response_get_data_length(
      this_,
    );
  }

  late final _etebase_collection_list_response_get_data_lengthPtr = _lookup<
          ffi.NativeFunction<
              ffi.UintPtr Function(
                  ffi.Pointer<EtebaseCollectionListResponse>)>>(
      'etebase_collection_list_response_get_data_length');
  late final _etebase_collection_list_response_get_data_length =
      _etebase_collection_list_response_get_data_lengthPtr.asFunction<
          int Function(ffi.Pointer<EtebaseCollectionListResponse>)>();

  /// Indicates whether there are no more collections to fetch
  ///
  /// @param this_ the object handle
  bool etebase_collection_list_response_is_done(
    ffi.Pointer<EtebaseCollectionListResponse> this_,
  ) {
    return _etebase_collection_list_response_is_done(
      this_,
    );
  }

  late final _etebase_collection_list_response_is_donePtr = _lookup<
          ffi.NativeFunction<
              ffi.Bool Function(ffi.Pointer<EtebaseCollectionListResponse>)>>(
      'etebase_collection_list_response_is_done');
  late final _etebase_collection_list_response_is_done =
      _etebase_collection_list_response_is_donePtr.asFunction<
          bool Function(ffi.Pointer<EtebaseCollectionListResponse>)>();

  /// The list of collections to which the user lost access
  ///
  /// @param this_ the object handle
  /// @param[out] data the array to store the collections in
  int etebase_collection_list_response_get_removed_memberships(
    ffi.Pointer<EtebaseCollectionListResponse> this_,
    ffi.Pointer<ffi.Pointer<EtebaseRemovedCollection>> data,
  ) {
    return _etebase_collection_list_response_get_removed_memberships(
      this_,
      data,
    );
  }

  late final _etebase_collection_list_response_get_removed_membershipsPtr =
      _lookup<
              ffi.NativeFunction<
                  ffi.Int32 Function(ffi.Pointer<EtebaseCollectionListResponse>,
                      ffi.Pointer<ffi.Pointer<EtebaseRemovedCollection>>)>>(
          'etebase_collection_list_response_get_removed_memberships');
  late final _etebase_collection_list_response_get_removed_memberships =
      _etebase_collection_list_response_get_removed_membershipsPtr.asFunction<
          int Function(ffi.Pointer<EtebaseCollectionListResponse>,
              ffi.Pointer<ffi.Pointer<EtebaseRemovedCollection>>)>();

  /// The number of collections to which the user lost access
  ///
  /// @param this_ the object handle
  int etebase_collection_list_response_get_removed_memberships_length(
    ffi.Pointer<EtebaseCollectionListResponse> this_,
  ) {
    return _etebase_collection_list_response_get_removed_memberships_length(
      this_,
    );
  }

  late final _etebase_collection_list_response_get_removed_memberships_lengthPtr =
      _lookup<
              ffi.NativeFunction<
                  ffi.UintPtr Function(
                      ffi.Pointer<EtebaseCollectionListResponse>)>>(
          'etebase_collection_list_response_get_removed_memberships_length');
  late final _etebase_collection_list_response_get_removed_memberships_length =
      _etebase_collection_list_response_get_removed_memberships_lengthPtr
          .asFunction<
              int Function(ffi.Pointer<EtebaseCollectionListResponse>)>();

  /// Destroy the object
  ///
  /// @param this_ the object handle
  void etebase_collection_list_response_destroy(
    ffi.Pointer<EtebaseCollectionListResponse> this_,
  ) {
    return _etebase_collection_list_response_destroy(
      this_,
    );
  }

  late final _etebase_collection_list_response_destroyPtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(ffi.Pointer<EtebaseCollectionListResponse>)>>(
      'etebase_collection_list_response_destroy');
  late final _etebase_collection_list_response_destroy =
      _etebase_collection_list_response_destroyPtr.asFunction<
          void Function(ffi.Pointer<EtebaseCollectionListResponse>)>();

  /// Sync token for the list response
  ///
  /// @param this_ the object handle
  ffi.Pointer<ffi.Char> etebase_item_list_response_get_stoken(
    ffi.Pointer<EtebaseItemListResponse> this_,
  ) {
    return _etebase_item_list_response_get_stoken(
      this_,
    );
  }

  late final _etebase_item_list_response_get_stokenPtr = _lookup<
          ffi.NativeFunction<
              ffi.Pointer<ffi.Char> Function(
                  ffi.Pointer<EtebaseItemListResponse>)>>(
      'etebase_item_list_response_get_stoken');
  late final _etebase_item_list_response_get_stoken =
      _etebase_item_list_response_get_stokenPtr.asFunction<
          ffi.Pointer<ffi.Char> Function(
              ffi.Pointer<EtebaseItemListResponse>)>();

  /// List of items included in the response
  ///
  /// @param this_ the object handle
  /// @param[out] data the array to store the items in
  int etebase_item_list_response_get_data(
    ffi.Pointer<EtebaseItemListResponse> this_,
    ffi.Pointer<ffi.Pointer<EtebaseItem>> data,
  ) {
    return _etebase_item_list_response_get_data(
      this_,
      data,
    );
  }

  late final _etebase_item_list_response_get_dataPtr = _lookup<
          ffi.NativeFunction<
              ffi.Int32 Function(ffi.Pointer<EtebaseItemListResponse>,
                  ffi.Pointer<ffi.Pointer<EtebaseItem>>)>>(
      'etebase_item_list_response_get_data');
  late final _etebase_item_list_response_get_data =
      _etebase_item_list_response_get_dataPtr.asFunction<
          int Function(ffi.Pointer<EtebaseItemListResponse>,
              ffi.Pointer<ffi.Pointer<EtebaseItem>>)>();

  /// The number of items included in the response
  ///
  /// @param this_ the object handle
  int etebase_item_list_response_get_data_length(
    ffi.Pointer<EtebaseItemListResponse> this_,
  ) {
    return _etebase_item_list_response_get_data_length(
      this_,
    );
  }

  late final _etebase_item_list_response_get_data_lengthPtr = _lookup<
          ffi.NativeFunction<
              ffi.UintPtr Function(ffi.Pointer<EtebaseItemListResponse>)>>(
      'etebase_item_list_response_get_data_length');
  late final _etebase_item_list_response_get_data_length =
      _etebase_item_list_response_get_data_lengthPtr
          .asFunction<int Function(ffi.Pointer<EtebaseItemListResponse>)>();

  /// Indicates whether there are no more items to fetch
  ///
  /// @param this_ the object handle
  bool etebase_item_list_response_is_done(
    ffi.Pointer<EtebaseItemListResponse> this_,
  ) {
    return _etebase_item_list_response_is_done(
      this_,
    );
  }

  late final _etebase_item_list_response_is_donePtr = _lookup<
          ffi.NativeFunction<
              ffi.Bool Function(ffi.Pointer<EtebaseItemListResponse>)>>(
      'etebase_item_list_response_is_done');
  late final _etebase_item_list_response_is_done =
      _etebase_item_list_response_is_donePtr
          .asFunction<bool Function(ffi.Pointer<EtebaseItemListResponse>)>();

  /// Destroy the object
  ///
  /// @param this_ the object handle
  void etebase_item_list_response_destroy(
    ffi.Pointer<EtebaseItemListResponse> this_,
  ) {
    return _etebase_item_list_response_destroy(
      this_,
    );
  }

  late final _etebase_item_list_response_destroyPtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(ffi.Pointer<EtebaseItemListResponse>)>>(
      'etebase_item_list_response_destroy');
  late final _etebase_item_list_response_destroy =
      _etebase_item_list_response_destroyPtr
          .asFunction<void Function(ffi.Pointer<EtebaseItemListResponse>)>();

  /// Iterator for the list response
  ///
  /// @param this_ the object handle
  ffi.Pointer<ffi.Char> etebase_item_revisions_list_response_get_iterator(
    ffi.Pointer<EtebaseItemRevisionsListResponse> this_,
  ) {
    return _etebase_item_revisions_list_response_get_iterator(
      this_,
    );
  }

  late final _etebase_item_revisions_list_response_get_iteratorPtr = _lookup<
          ffi.NativeFunction<
              ffi.Pointer<ffi.Char> Function(
                  ffi.Pointer<EtebaseItemRevisionsListResponse>)>>(
      'etebase_item_revisions_list_response_get_iterator');
  late final _etebase_item_revisions_list_response_get_iterator =
      _etebase_item_revisions_list_response_get_iteratorPtr.asFunction<
          ffi.Pointer<ffi.Char> Function(
              ffi.Pointer<EtebaseItemRevisionsListResponse>)>();

  /// List of item revisions included in the response
  ///
  /// @param this_ the object handle
  /// @param[out] data the array to store the items in
  int etebase_item_revisions_list_response_get_data(
    ffi.Pointer<EtebaseItemRevisionsListResponse> this_,
    ffi.Pointer<ffi.Pointer<EtebaseItem>> data,
  ) {
    return _etebase_item_revisions_list_response_get_data(
      this_,
      data,
    );
  }

  late final _etebase_item_revisions_list_response_get_dataPtr = _lookup<
          ffi.NativeFunction<
              ffi.Int32 Function(ffi.Pointer<EtebaseItemRevisionsListResponse>,
                  ffi.Pointer<ffi.Pointer<EtebaseItem>>)>>(
      'etebase_item_revisions_list_response_get_data');
  late final _etebase_item_revisions_list_response_get_data =
      _etebase_item_revisions_list_response_get_dataPtr.asFunction<
          int Function(ffi.Pointer<EtebaseItemRevisionsListResponse>,
              ffi.Pointer<ffi.Pointer<EtebaseItem>>)>();

  /// The number of item revisions included in the response
  ///
  /// @param this_ the object handle
  int etebase_item_revisions_list_response_get_data_length(
    ffi.Pointer<EtebaseItemRevisionsListResponse> this_,
  ) {
    return _etebase_item_revisions_list_response_get_data_length(
      this_,
    );
  }

  late final _etebase_item_revisions_list_response_get_data_lengthPtr = _lookup<
          ffi.NativeFunction<
              ffi.UintPtr Function(
                  ffi.Pointer<EtebaseItemRevisionsListResponse>)>>(
      'etebase_item_revisions_list_response_get_data_length');
  late final _etebase_item_revisions_list_response_get_data_length =
      _etebase_item_revisions_list_response_get_data_lengthPtr.asFunction<
          int Function(ffi.Pointer<EtebaseItemRevisionsListResponse>)>();

  /// Indicates whether there is no more data to fetch
  ///
  /// @param this_ the object handle
  bool etebase_item_revisions_list_response_is_done(
    ffi.Pointer<EtebaseItemRevisionsListResponse> this_,
  ) {
    return _etebase_item_revisions_list_response_is_done(
      this_,
    );
  }

  late final _etebase_item_revisions_list_response_is_donePtr = _lookup<
          ffi.NativeFunction<
              ffi.Bool Function(
                  ffi.Pointer<EtebaseItemRevisionsListResponse>)>>(
      'etebase_item_revisions_list_response_is_done');
  late final _etebase_item_revisions_list_response_is_done =
      _etebase_item_revisions_list_response_is_donePtr.asFunction<
          bool Function(ffi.Pointer<EtebaseItemRevisionsListResponse>)>();

  /// Destroy the object
  ///
  /// @param this_ the object handle
  void etebase_item_revisions_list_response_destroy(
    ffi.Pointer<EtebaseItemRevisionsListResponse> this_,
  ) {
    return _etebase_item_revisions_list_response_destroy(
      this_,
    );
  }

  late final _etebase_item_revisions_list_response_destroyPtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(
                  ffi.Pointer<EtebaseItemRevisionsListResponse>)>>(
      'etebase_item_revisions_list_response_destroy');
  late final _etebase_item_revisions_list_response_destroy =
      _etebase_item_revisions_list_response_destroyPtr.asFunction<
          void Function(ffi.Pointer<EtebaseItemRevisionsListResponse>)>();

  /// Return a new fetch options object
  ///
  /// Should be destroyed with `etebase_fetch_options_destroy`
  ffi.Pointer<EtebaseFetchOptions> etebase_fetch_options_new() {
    return _etebase_fetch_options_new();
  }

  late final _etebase_fetch_options_newPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<EtebaseFetchOptions> Function()>>(
          'etebase_fetch_options_new');
  late final _etebase_fetch_options_new = _etebase_fetch_options_newPtr
      .asFunction<ffi.Pointer<EtebaseFetchOptions> Function()>();

  /// Limit the amount of items returned
  ///
  /// @param this_ the object handle
  /// @param limit the limit to set
  void etebase_fetch_options_set_limit(
    ffi.Pointer<EtebaseFetchOptions> this_,
    int limit,
  ) {
    return _etebase_fetch_options_set_limit(
      this_,
      limit,
    );
  }

  late final _etebase_fetch_options_set_limitPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<EtebaseFetchOptions>,
              ffi.UintPtr)>>('etebase_fetch_options_set_limit');
  late final _etebase_fetch_options_set_limit =
      _etebase_fetch_options_set_limitPtr
          .asFunction<void Function(ffi.Pointer<EtebaseFetchOptions>, int)>();

  /// How much data to prefetech
  ///
  /// @param this_ the object handle
  /// @param prefetch the prefetch option to set
  void etebase_fetch_options_set_prefetch(
    ffi.Pointer<EtebaseFetchOptions> this_,
    int prefetch,
  ) {
    return _etebase_fetch_options_set_prefetch(
      this_,
      prefetch,
    );
  }

  late final _etebase_fetch_options_set_prefetchPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<EtebaseFetchOptions>,
              EtebasePrefetchOption)>>('etebase_fetch_options_set_prefetch');
  late final _etebase_fetch_options_set_prefetch =
      _etebase_fetch_options_set_prefetchPtr
          .asFunction<void Function(ffi.Pointer<EtebaseFetchOptions>, int)>();

  /// Toggle fetching the collection's item
  ///
  /// @param this_ the object handle
  /// @param with_collection set whether to fetch the collection's item
  void etebase_fetch_options_set_with_collection(
    ffi.Pointer<EtebaseFetchOptions> this_,
    bool with_collection,
  ) {
    return _etebase_fetch_options_set_with_collection(
      this_,
      with_collection,
    );
  }

  late final _etebase_fetch_options_set_with_collectionPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<EtebaseFetchOptions>,
              ffi.Bool)>>('etebase_fetch_options_set_with_collection');
  late final _etebase_fetch_options_set_with_collection =
      _etebase_fetch_options_set_with_collectionPtr
          .asFunction<void Function(ffi.Pointer<EtebaseFetchOptions>, bool)>();

  /// The current iterator to start from (when iterating lists)
  ///
  /// @param this_ the object handle
  /// @param iterator the iterator to start from
  void etebase_fetch_options_set_iterator(
    ffi.Pointer<EtebaseFetchOptions> this_,
    ffi.Pointer<ffi.Char> iterator,
  ) {
    return _etebase_fetch_options_set_iterator(
      this_,
      iterator,
    );
  }

  late final _etebase_fetch_options_set_iteratorPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<EtebaseFetchOptions>,
              ffi.Pointer<ffi.Char>)>>('etebase_fetch_options_set_iterator');
  late final _etebase_fetch_options_set_iterator =
      _etebase_fetch_options_set_iteratorPtr.asFunction<
          void Function(
              ffi.Pointer<EtebaseFetchOptions>, ffi.Pointer<ffi.Char>)>();

  /// The sync token to fetch with
  ///
  /// @param this_ the object handle
  /// @param stoken the sync token to set
  void etebase_fetch_options_set_stoken(
    ffi.Pointer<EtebaseFetchOptions> this_,
    ffi.Pointer<ffi.Char> stoken,
  ) {
    return _etebase_fetch_options_set_stoken(
      this_,
      stoken,
    );
  }

  late final _etebase_fetch_options_set_stokenPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<EtebaseFetchOptions>,
              ffi.Pointer<ffi.Char>)>>('etebase_fetch_options_set_stoken');
  late final _etebase_fetch_options_set_stoken =
      _etebase_fetch_options_set_stokenPtr.asFunction<
          void Function(
              ffi.Pointer<EtebaseFetchOptions>, ffi.Pointer<ffi.Char>)>();

  /// Destroy the object
  ///
  /// @param this_ the object handle
  void etebase_fetch_options_destroy(
    ffi.Pointer<EtebaseFetchOptions> this_,
  ) {
    return _etebase_fetch_options_destroy(
      this_,
    );
  }

  late final _etebase_fetch_options_destroyPtr = _lookup<
          ffi
          .NativeFunction<ffi.Void Function(ffi.Pointer<EtebaseFetchOptions>)>>(
      'etebase_fetch_options_destroy');
  late final _etebase_fetch_options_destroy = _etebase_fetch_options_destroyPtr
      .asFunction<void Function(ffi.Pointer<EtebaseFetchOptions>)>();

  /// Create a new metadata object
  ///
  /// Should be destroyed with `etebase_item_metadata_destroy`
  ffi.Pointer<EtebaseItemMetadata> etebase_item_metadata_new() {
    return _etebase_item_metadata_new();
  }

  late final _etebase_item_metadata_newPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<EtebaseItemMetadata> Function()>>(
          'etebase_item_metadata_new');
  late final _etebase_item_metadata_new = _etebase_item_metadata_newPtr
      .asFunction<ffi.Pointer<EtebaseItemMetadata> Function()>();

  /// Set the item type
  ///
  /// @param this_ the object handle
  /// @param item_type the type to be set
  void etebase_item_metadata_set_item_type(
    ffi.Pointer<EtebaseItemMetadata> this_,
    ffi.Pointer<ffi.Char> item_type,
  ) {
    return _etebase_item_metadata_set_item_type(
      this_,
      item_type,
    );
  }

  late final _etebase_item_metadata_set_item_typePtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<EtebaseItemMetadata>,
              ffi.Pointer<ffi.Char>)>>('etebase_item_metadata_set_item_type');
  late final _etebase_item_metadata_set_item_type =
      _etebase_item_metadata_set_item_typePtr.asFunction<
          void Function(
              ffi.Pointer<EtebaseItemMetadata>, ffi.Pointer<ffi.Char>)>();

  /// The item type
  ///
  /// @param this_ the object handle
  ffi.Pointer<ffi.Char> etebase_item_metadata_get_item_type(
    ffi.Pointer<EtebaseItemMetadata> this_,
  ) {
    return _etebase_item_metadata_get_item_type(
      this_,
    );
  }

  late final _etebase_item_metadata_get_item_typePtr = _lookup<
          ffi.NativeFunction<
              ffi.Pointer<ffi.Char> Function(
                  ffi.Pointer<EtebaseItemMetadata>)>>(
      'etebase_item_metadata_get_item_type');
  late final _etebase_item_metadata_get_item_type =
      _etebase_item_metadata_get_item_typePtr.asFunction<
          ffi.Pointer<ffi.Char> Function(ffi.Pointer<EtebaseItemMetadata>)>();

  /// Set the item name
  ///
  /// For example, you can set it to "Secret Note" or "todo.txt"
  ///
  /// @param this_ the object handle
  /// @param name the name to be set
  void etebase_item_metadata_set_name(
    ffi.Pointer<EtebaseItemMetadata> this_,
    ffi.Pointer<ffi.Char> name,
  ) {
    return _etebase_item_metadata_set_name(
      this_,
      name,
    );
  }

  late final _etebase_item_metadata_set_namePtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<EtebaseItemMetadata>,
              ffi.Pointer<ffi.Char>)>>('etebase_item_metadata_set_name');
  late final _etebase_item_metadata_set_name =
      _etebase_item_metadata_set_namePtr.asFunction<
          void Function(
              ffi.Pointer<EtebaseItemMetadata>, ffi.Pointer<ffi.Char>)>();

  /// The item name
  ///
  /// @param this_ the object handle
  ffi.Pointer<ffi.Char> etebase_item_metadata_get_name(
    ffi.Pointer<EtebaseItemMetadata> this_,
  ) {
    return _etebase_item_metadata_get_name(
      this_,
    );
  }

  late final _etebase_item_metadata_get_namePtr = _lookup<
          ffi.NativeFunction<
              ffi.Pointer<ffi.Char> Function(
                  ffi.Pointer<EtebaseItemMetadata>)>>(
      'etebase_item_metadata_get_name');
  late final _etebase_item_metadata_get_name =
      _etebase_item_metadata_get_namePtr.asFunction<
          ffi.Pointer<ffi.Char> Function(ffi.Pointer<EtebaseItemMetadata>)>();

  /// Set the modification time of the item
  ///
  /// @param this_ the object handle
  /// @param mtime the modification time in milliseconds since epoch
  void etebase_item_metadata_set_mtime(
    ffi.Pointer<EtebaseItemMetadata> this_,
    ffi.Pointer<ffi.Int64> mtime,
  ) {
    return _etebase_item_metadata_set_mtime(
      this_,
      mtime,
    );
  }

  late final _etebase_item_metadata_set_mtimePtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<EtebaseItemMetadata>,
              ffi.Pointer<ffi.Int64>)>>('etebase_item_metadata_set_mtime');
  late final _etebase_item_metadata_set_mtime =
      _etebase_item_metadata_set_mtimePtr.asFunction<
          void Function(
              ffi.Pointer<EtebaseItemMetadata>, ffi.Pointer<ffi.Int64>)>();

  /// Modification time of the item
  ///
  /// @param this_ the object handle
  ffi.Pointer<ffi.Int64> etebase_item_metadata_get_mtime(
    ffi.Pointer<EtebaseItemMetadata> this_,
  ) {
    return _etebase_item_metadata_get_mtime(
      this_,
    );
  }

  late final _etebase_item_metadata_get_mtimePtr = _lookup<
          ffi.NativeFunction<
              ffi.Pointer<ffi.Int64> Function(
                  ffi.Pointer<EtebaseItemMetadata>)>>(
      'etebase_item_metadata_get_mtime');
  late final _etebase_item_metadata_get_mtime =
      _etebase_item_metadata_get_mtimePtr.asFunction<
          ffi.Pointer<ffi.Int64> Function(ffi.Pointer<EtebaseItemMetadata>)>();

  /// Set a description for the item
  ///
  /// @param this_ the object handle
  /// @param description the description to be set
  void etebase_item_metadata_set_description(
    ffi.Pointer<EtebaseItemMetadata> this_,
    ffi.Pointer<ffi.Char> description,
  ) {
    return _etebase_item_metadata_set_description(
      this_,
      description,
    );
  }

  late final _etebase_item_metadata_set_descriptionPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<EtebaseItemMetadata>,
              ffi.Pointer<ffi.Char>)>>('etebase_item_metadata_set_description');
  late final _etebase_item_metadata_set_description =
      _etebase_item_metadata_set_descriptionPtr.asFunction<
          void Function(
              ffi.Pointer<EtebaseItemMetadata>, ffi.Pointer<ffi.Char>)>();

  /// The item description
  ///
  /// @param this_ the object handle
  ffi.Pointer<ffi.Char> etebase_item_metadata_get_description(
    ffi.Pointer<EtebaseItemMetadata> this_,
  ) {
    return _etebase_item_metadata_get_description(
      this_,
    );
  }

  late final _etebase_item_metadata_get_descriptionPtr = _lookup<
          ffi.NativeFunction<
              ffi.Pointer<ffi.Char> Function(
                  ffi.Pointer<EtebaseItemMetadata>)>>(
      'etebase_item_metadata_get_description');
  late final _etebase_item_metadata_get_description =
      _etebase_item_metadata_get_descriptionPtr.asFunction<
          ffi.Pointer<ffi.Char> Function(ffi.Pointer<EtebaseItemMetadata>)>();

  /// Set a color for the item
  ///
  /// @param this_ the object handle
  /// @param color the color to be set in `#RRGGBB` or `#RRGGBBAA` format
  void etebase_item_metadata_set_color(
    ffi.Pointer<EtebaseItemMetadata> this_,
    ffi.Pointer<ffi.Char> color,
  ) {
    return _etebase_item_metadata_set_color(
      this_,
      color,
    );
  }

  late final _etebase_item_metadata_set_colorPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<EtebaseItemMetadata>,
              ffi.Pointer<ffi.Char>)>>('etebase_item_metadata_set_color');
  late final _etebase_item_metadata_set_color =
      _etebase_item_metadata_set_colorPtr.asFunction<
          void Function(
              ffi.Pointer<EtebaseItemMetadata>, ffi.Pointer<ffi.Char>)>();

  /// The item color in `#RRGGBB` or `#RRGGBBAA` format
  ///
  /// @param this_ the object handle
  ffi.Pointer<ffi.Char> etebase_item_metadata_get_color(
    ffi.Pointer<EtebaseItemMetadata> this_,
  ) {
    return _etebase_item_metadata_get_color(
      this_,
    );
  }

  late final _etebase_item_metadata_get_colorPtr = _lookup<
          ffi.NativeFunction<
              ffi.Pointer<ffi.Char> Function(
                  ffi.Pointer<EtebaseItemMetadata>)>>(
      'etebase_item_metadata_get_color');
  late final _etebase_item_metadata_get_color =
      _etebase_item_metadata_get_colorPtr.asFunction<
          ffi.Pointer<ffi.Char> Function(ffi.Pointer<EtebaseItemMetadata>)>();

  /// Destroy the object
  ///
  /// @param this_ the object handle
  void etebase_item_metadata_destroy(
    ffi.Pointer<EtebaseItemMetadata> this_,
  ) {
    return _etebase_item_metadata_destroy(
      this_,
    );
  }

  late final _etebase_item_metadata_destroyPtr = _lookup<
          ffi
          .NativeFunction<ffi.Void Function(ffi.Pointer<EtebaseItemMetadata>)>>(
      'etebase_item_metadata_destroy');
  late final _etebase_item_metadata_destroy = _etebase_item_metadata_destroyPtr
      .asFunction<void Function(ffi.Pointer<EtebaseItemMetadata>)>();

  /// Fetch a single collection from the server using its UID
  ///
  /// @param this_ the object handle
  /// @param col_uid the UID of the collection to be fetched
  /// @param fetch_options the `EtebaseFetchOptions` to fetch with
  ffi.Pointer<EtebaseCollection> etebase_collection_manager_fetch(
    ffi.Pointer<EtebaseCollectionManager> this_,
    ffi.Pointer<ffi.Char> col_uid,
    ffi.Pointer<EtebaseFetchOptions> fetch_options,
  ) {
    return _etebase_collection_manager_fetch(
      this_,
      col_uid,
      fetch_options,
    );
  }

  late final _etebase_collection_manager_fetchPtr = _lookup<
          ffi.NativeFunction<
              ffi.Pointer<EtebaseCollection> Function(
                  ffi.Pointer<EtebaseCollectionManager>,
                  ffi.Pointer<ffi.Char>,
                  ffi.Pointer<EtebaseFetchOptions>)>>(
      'etebase_collection_manager_fetch');
  late final _etebase_collection_manager_fetch =
      _etebase_collection_manager_fetchPtr.asFunction<
          ffi.Pointer<EtebaseCollection> Function(
              ffi.Pointer<EtebaseCollectionManager>,
              ffi.Pointer<ffi.Char>,
              ffi.Pointer<EtebaseFetchOptions>)>();

  /// Create a new collection
  ///
  /// Should be destroyed with `etebase_collection_destroy`
  ///
  /// @param this_ the object handle
  /// @param collection_type the type of [Item]s stored in the collection
  /// @param meta the [ItemMetadata] for the collection
  /// @param content the collection's content as a byte array. This is unrelated to the [Item]s in the collection.
  /// @param content_size the content size
  ffi.Pointer<EtebaseCollection> etebase_collection_manager_create(
    ffi.Pointer<EtebaseCollectionManager> this_,
    ffi.Pointer<ffi.Char> collection_type,
    ffi.Pointer<EtebaseItemMetadata> meta,
    ffi.Pointer<ffi.Void> content,
    int content_size,
  ) {
    return _etebase_collection_manager_create(
      this_,
      collection_type,
      meta,
      content,
      content_size,
    );
  }

  late final _etebase_collection_manager_createPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<EtebaseCollection> Function(
              ffi.Pointer<EtebaseCollectionManager>,
              ffi.Pointer<ffi.Char>,
              ffi.Pointer<EtebaseItemMetadata>,
              ffi.Pointer<ffi.Void>,
              ffi.UintPtr)>>('etebase_collection_manager_create');
  late final _etebase_collection_manager_create =
      _etebase_collection_manager_createPtr.asFunction<
          ffi.Pointer<EtebaseCollection> Function(
              ffi.Pointer<EtebaseCollectionManager>,
              ffi.Pointer<ffi.Char>,
              ffi.Pointer<EtebaseItemMetadata>,
              ffi.Pointer<ffi.Void>,
              int)>();

  /// Create a new collection using raw metadata
  ///
  /// Unlike `etebase_collection_manager_create`, this receives the metadata as valid `EtebaseItemMetadata`-like struct encoded using `msgpack`.
  /// This can be used to create collections with custom metadata types.
  ///
  /// Should be destroyed with `etebase_collection_destroy`
  ///
  /// @param this_ the object handle
  /// @param collection_type the type of [Item]s stored in the collection
  /// @param meta the metadata for the collection as a byte array
  /// @param meta_size the metadata size
  /// @param content the collection's content as a byte array. This is unrelated to the [Item]s in the collection.
  /// @param content_size the content size
  ffi.Pointer<EtebaseCollection> etebase_collection_manager_create_raw(
    ffi.Pointer<EtebaseCollectionManager> this_,
    ffi.Pointer<ffi.Char> collection_type,
    ffi.Pointer<ffi.Void> meta,
    int meta_size,
    ffi.Pointer<ffi.Void> content,
    int content_size,
  ) {
    return _etebase_collection_manager_create_raw(
      this_,
      collection_type,
      meta,
      meta_size,
      content,
      content_size,
    );
  }

  late final _etebase_collection_manager_create_rawPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<EtebaseCollection> Function(
              ffi.Pointer<EtebaseCollectionManager>,
              ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Void>,
              ffi.UintPtr,
              ffi.Pointer<ffi.Void>,
              ffi.UintPtr)>>('etebase_collection_manager_create_raw');
  late final _etebase_collection_manager_create_raw =
      _etebase_collection_manager_create_rawPtr.asFunction<
          ffi.Pointer<EtebaseCollection> Function(
              ffi.Pointer<EtebaseCollectionManager>,
              ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Void>,
              int,
              ffi.Pointer<ffi.Void>,
              int)>();

  /// Return the item manager for the supplied collection
  ///
  /// @param this_ the object handle
  /// @param col the collection for which the item manager is required
  ffi.Pointer<EtebaseItemManager> etebase_collection_manager_get_item_manager(
    ffi.Pointer<EtebaseCollectionManager> this_,
    ffi.Pointer<EtebaseCollection> col,
  ) {
    return _etebase_collection_manager_get_item_manager(
      this_,
      col,
    );
  }

  late final _etebase_collection_manager_get_item_managerPtr = _lookup<
          ffi.NativeFunction<
              ffi.Pointer<EtebaseItemManager> Function(
                  ffi.Pointer<EtebaseCollectionManager>,
                  ffi.Pointer<EtebaseCollection>)>>(
      'etebase_collection_manager_get_item_manager');
  late final _etebase_collection_manager_get_item_manager =
      _etebase_collection_manager_get_item_managerPtr.asFunction<
          ffi.Pointer<EtebaseItemManager> Function(
              ffi.Pointer<EtebaseCollectionManager>,
              ffi.Pointer<EtebaseCollection>)>();

  /// Fetch all collections of a specific type from the server and return a list response
  ///
  /// @param this_ the object handle
  /// @param collection_type the type of items stored in the collection
  /// @param fetch_options the `EtebaseFetchOptions` to fetch with
  ffi.Pointer<EtebaseCollectionListResponse> etebase_collection_manager_list(
    ffi.Pointer<EtebaseCollectionManager> this_,
    ffi.Pointer<ffi.Char> collection_type,
    ffi.Pointer<EtebaseFetchOptions> fetch_options,
  ) {
    return _etebase_collection_manager_list(
      this_,
      collection_type,
      fetch_options,
    );
  }

  late final _etebase_collection_manager_listPtr = _lookup<
          ffi.NativeFunction<
              ffi.Pointer<EtebaseCollectionListResponse> Function(
                  ffi.Pointer<EtebaseCollectionManager>,
                  ffi.Pointer<ffi.Char>,
                  ffi.Pointer<EtebaseFetchOptions>)>>(
      'etebase_collection_manager_list');
  late final _etebase_collection_manager_list =
      _etebase_collection_manager_listPtr.asFunction<
          ffi.Pointer<EtebaseCollectionListResponse> Function(
              ffi.Pointer<EtebaseCollectionManager>,
              ffi.Pointer<ffi.Char>,
              ffi.Pointer<EtebaseFetchOptions>)>();

  /// Fetch all collections of the supplied types from the server and return a list response
  ///
  /// @param this_ the object handle
  /// @param collection_types array of strings denoting the collection types
  /// @param collection_types_size size of the collection_types array
  /// @param fetch_options the `EtebaseFetchOptions` to fetch with
  ffi.Pointer<EtebaseCollectionListResponse>
      etebase_collection_manager_list_multi(
    ffi.Pointer<EtebaseCollectionManager> this_,
    ffi.Pointer<ffi.Pointer<ffi.Char>> collection_types,
    int collection_types_size,
    ffi.Pointer<EtebaseFetchOptions> fetch_options,
  ) {
    return _etebase_collection_manager_list_multi(
      this_,
      collection_types,
      collection_types_size,
      fetch_options,
    );
  }

  late final _etebase_collection_manager_list_multiPtr = _lookup<
          ffi.NativeFunction<
              ffi.Pointer<EtebaseCollectionListResponse> Function(
                  ffi.Pointer<EtebaseCollectionManager>,
                  ffi.Pointer<ffi.Pointer<ffi.Char>>,
                  ffi.UintPtr,
                  ffi.Pointer<EtebaseFetchOptions>)>>(
      'etebase_collection_manager_list_multi');
  late final _etebase_collection_manager_list_multi =
      _etebase_collection_manager_list_multiPtr.asFunction<
          ffi.Pointer<EtebaseCollectionListResponse> Function(
              ffi.Pointer<EtebaseCollectionManager>,
              ffi.Pointer<ffi.Pointer<ffi.Char>>,
              int,
              ffi.Pointer<EtebaseFetchOptions>)>();

  /// Upload a collection
  ///
  /// @param this_ the object handle
  /// @param collection the collection object to be uploaded
  /// @param fetch_options the `EtebaseFetchOptions` to upload with
  int etebase_collection_manager_upload(
    ffi.Pointer<EtebaseCollectionManager> this_,
    ffi.Pointer<EtebaseCollection> collection,
    ffi.Pointer<EtebaseFetchOptions> fetch_options,
  ) {
    return _etebase_collection_manager_upload(
      this_,
      collection,
      fetch_options,
    );
  }

  late final _etebase_collection_manager_uploadPtr = _lookup<
          ffi.NativeFunction<
              ffi.Int32 Function(
                  ffi.Pointer<EtebaseCollectionManager>,
                  ffi.Pointer<EtebaseCollection>,
                  ffi.Pointer<EtebaseFetchOptions>)>>(
      'etebase_collection_manager_upload');
  late final _etebase_collection_manager_upload =
      _etebase_collection_manager_uploadPtr.asFunction<
          int Function(
              ffi.Pointer<EtebaseCollectionManager>,
              ffi.Pointer<EtebaseCollection>,
              ffi.Pointer<EtebaseFetchOptions>)>();

  /// Upload a collection using a transaction
  ///
  /// This call ensures that the collection hasn't changed since we last fetched it
  ///
  /// @param this_ the object handle
  /// @param collection the collection object to be uploaded
  /// @param fetch_options the `EtebaseFetchOptions` to upload with
  int etebase_collection_manager_transaction(
    ffi.Pointer<EtebaseCollectionManager> this_,
    ffi.Pointer<EtebaseCollection> collection,
    ffi.Pointer<EtebaseFetchOptions> fetch_options,
  ) {
    return _etebase_collection_manager_transaction(
      this_,
      collection,
      fetch_options,
    );
  }

  late final _etebase_collection_manager_transactionPtr = _lookup<
          ffi.NativeFunction<
              ffi.Int32 Function(
                  ffi.Pointer<EtebaseCollectionManager>,
                  ffi.Pointer<EtebaseCollection>,
                  ffi.Pointer<EtebaseFetchOptions>)>>(
      'etebase_collection_manager_transaction');
  late final _etebase_collection_manager_transaction =
      _etebase_collection_manager_transactionPtr.asFunction<
          int Function(
              ffi.Pointer<EtebaseCollectionManager>,
              ffi.Pointer<EtebaseCollection>,
              ffi.Pointer<EtebaseFetchOptions>)>();

  /// Load and return a cached collection object from a byte buffer
  ///
  /// @param this_ the object handle
  /// @param cached the byte buffer holding the cached collection obtained using [cache_save]
  /// @param cached_size size of the buffer
  ffi.Pointer<EtebaseCollection> etebase_collection_manager_cache_load(
    ffi.Pointer<EtebaseCollectionManager> this_,
    ffi.Pointer<ffi.Void> cached,
    int cached_size,
  ) {
    return _etebase_collection_manager_cache_load(
      this_,
      cached,
      cached_size,
    );
  }

  late final _etebase_collection_manager_cache_loadPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<EtebaseCollection> Function(
              ffi.Pointer<EtebaseCollectionManager>,
              ffi.Pointer<ffi.Void>,
              ffi.UintPtr)>>('etebase_collection_manager_cache_load');
  late final _etebase_collection_manager_cache_load =
      _etebase_collection_manager_cache_loadPtr.asFunction<
          ffi.Pointer<EtebaseCollection> Function(
              ffi.Pointer<EtebaseCollectionManager>,
              ffi.Pointer<ffi.Void>,
              int)>();

  /// Save the collection object to a byte buffer for caching
  ///
  /// The collection can later be loaded using `etebase_collection_manager_cache_load`
  ///
  /// @param this_ the object handle
  /// @param collection the collection object to be cached
  /// @param[out] ret_size to hold the size of the returned buffer
  ffi.Pointer<ffi.Void> etebase_collection_manager_cache_save(
    ffi.Pointer<EtebaseCollectionManager> this_,
    ffi.Pointer<EtebaseCollection> collection,
    ffi.Pointer<ffi.UintPtr> ret_size,
  ) {
    return _etebase_collection_manager_cache_save(
      this_,
      collection,
      ret_size,
    );
  }

  late final _etebase_collection_manager_cache_savePtr = _lookup<
          ffi.NativeFunction<
              ffi.Pointer<ffi.Void> Function(
                  ffi.Pointer<EtebaseCollectionManager>,
                  ffi.Pointer<EtebaseCollection>,
                  ffi.Pointer<ffi.UintPtr>)>>(
      'etebase_collection_manager_cache_save');
  late final _etebase_collection_manager_cache_save =
      _etebase_collection_manager_cache_savePtr.asFunction<
          ffi.Pointer<ffi.Void> Function(ffi.Pointer<EtebaseCollectionManager>,
              ffi.Pointer<EtebaseCollection>, ffi.Pointer<ffi.UintPtr>)>();

  /// Save the collection object and its content to a byte buffer for caching
  ///
  /// The collection can later be loaded using `etebase_collection_manager_cache_load`
  ///
  /// @param this_ the object handle
  /// @param collection the collection object to be cached
  /// @param[out] ret_size to hold the size of the returned buffer
  ffi.Pointer<ffi.Void> etebase_collection_manager_cache_save_with_content(
    ffi.Pointer<EtebaseCollectionManager> this_,
    ffi.Pointer<EtebaseCollection> collection,
    ffi.Pointer<ffi.UintPtr> ret_size,
  ) {
    return _etebase_collection_manager_cache_save_with_content(
      this_,
      collection,
      ret_size,
    );
  }

  late final _etebase_collection_manager_cache_save_with_contentPtr = _lookup<
          ffi.NativeFunction<
              ffi.Pointer<ffi.Void> Function(
                  ffi.Pointer<EtebaseCollectionManager>,
                  ffi.Pointer<EtebaseCollection>,
                  ffi.Pointer<ffi.UintPtr>)>>(
      'etebase_collection_manager_cache_save_with_content');
  late final _etebase_collection_manager_cache_save_with_content =
      _etebase_collection_manager_cache_save_with_contentPtr.asFunction<
          ffi.Pointer<ffi.Void> Function(ffi.Pointer<EtebaseCollectionManager>,
              ffi.Pointer<EtebaseCollection>, ffi.Pointer<ffi.UintPtr>)>();

  /// Return the collection member manager for the supplied collection
  ///
  /// @param this_ the object handle
  /// @param col the collection for which the manager is required
  ffi.Pointer<EtebaseCollectionMemberManager>
      etebase_collection_manager_get_member_manager(
    ffi.Pointer<EtebaseCollectionManager> this_,
    ffi.Pointer<EtebaseCollection> col,
  ) {
    return _etebase_collection_manager_get_member_manager(
      this_,
      col,
    );
  }

  late final _etebase_collection_manager_get_member_managerPtr = _lookup<
          ffi.NativeFunction<
              ffi.Pointer<EtebaseCollectionMemberManager> Function(
                  ffi.Pointer<EtebaseCollectionManager>,
                  ffi.Pointer<EtebaseCollection>)>>(
      'etebase_collection_manager_get_member_manager');
  late final _etebase_collection_manager_get_member_manager =
      _etebase_collection_manager_get_member_managerPtr.asFunction<
          ffi.Pointer<EtebaseCollectionMemberManager> Function(
              ffi.Pointer<EtebaseCollectionManager>,
              ffi.Pointer<EtebaseCollection>)>();

  /// Destroy the object
  ///
  /// @param this_ the object handle
  void etebase_collection_manager_destroy(
    ffi.Pointer<EtebaseCollectionManager> this_,
  ) {
    return _etebase_collection_manager_destroy(
      this_,
    );
  }

  late final _etebase_collection_manager_destroyPtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(ffi.Pointer<EtebaseCollectionManager>)>>(
      'etebase_collection_manager_destroy');
  late final _etebase_collection_manager_destroy =
      _etebase_collection_manager_destroyPtr
          .asFunction<void Function(ffi.Pointer<EtebaseCollectionManager>)>();

  /// Fetch a single item from the server using its UID
  ///
  /// @param this_ the object handle
  /// @param item_uid the UID of the item to be fetched
  /// @param fetch_options the `EtebaseFetchOptions` to fetch with
  ffi.Pointer<EtebaseItem> etebase_item_manager_fetch(
    ffi.Pointer<EtebaseItemManager> this_,
    ffi.Pointer<ffi.Char> item_uid,
    ffi.Pointer<EtebaseFetchOptions> fetch_options,
  ) {
    return _etebase_item_manager_fetch(
      this_,
      item_uid,
      fetch_options,
    );
  }

  late final _etebase_item_manager_fetchPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<EtebaseItem> Function(
              ffi.Pointer<EtebaseItemManager>,
              ffi.Pointer<ffi.Char>,
              ffi.Pointer<EtebaseFetchOptions>)>>('etebase_item_manager_fetch');
  late final _etebase_item_manager_fetch =
      _etebase_item_manager_fetchPtr.asFunction<
          ffi.Pointer<EtebaseItem> Function(ffi.Pointer<EtebaseItemManager>,
              ffi.Pointer<ffi.Char>, ffi.Pointer<EtebaseFetchOptions>)>();

  /// Create a new item
  ///
  /// Should be destroyed with `etebase_item_destroy`
  ///
  /// @param this_ the object handle
  /// @param meta the [ItemMetadata] for the item
  /// @param content the item's content as a byte array
  /// @param content_size the content size
  ffi.Pointer<EtebaseItem> etebase_item_manager_create(
    ffi.Pointer<EtebaseItemManager> this_,
    ffi.Pointer<EtebaseItemMetadata> meta,
    ffi.Pointer<ffi.Void> content,
    int content_size,
  ) {
    return _etebase_item_manager_create(
      this_,
      meta,
      content,
      content_size,
    );
  }

  late final _etebase_item_manager_createPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<EtebaseItem> Function(
              ffi.Pointer<EtebaseItemManager>,
              ffi.Pointer<EtebaseItemMetadata>,
              ffi.Pointer<ffi.Void>,
              ffi.UintPtr)>>('etebase_item_manager_create');
  late final _etebase_item_manager_create =
      _etebase_item_manager_createPtr.asFunction<
          ffi.Pointer<EtebaseItem> Function(ffi.Pointer<EtebaseItemManager>,
              ffi.Pointer<EtebaseItemMetadata>, ffi.Pointer<ffi.Void>, int)>();

  /// Create a new item using raw metadata
  ///
  /// Unlike `etebase_item_manager_create`, this receives the metadata as valid `EtebaseItemMetadata`-like struct encoded using `msgpack`.
  /// This can be used to create collections with custom metadata types.
  ///
  /// Should be destroyed with `etebase_item_destroy`
  ///
  /// @param this_ the object handle
  /// @param meta the metadata for the item as a byte array
  /// @param meta_size the metadata size
  /// @param content the item's content as a byte array
  /// @param content_size the content size
  ffi.Pointer<EtebaseItem> etebase_item_manager_create_raw(
    ffi.Pointer<EtebaseItemManager> this_,
    ffi.Pointer<ffi.Void> meta,
    int meta_size,
    ffi.Pointer<ffi.Void> content,
    int content_size,
  ) {
    return _etebase_item_manager_create_raw(
      this_,
      meta,
      meta_size,
      content,
      content_size,
    );
  }

  late final _etebase_item_manager_create_rawPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<EtebaseItem> Function(
              ffi.Pointer<EtebaseItemManager>,
              ffi.Pointer<ffi.Void>,
              ffi.UintPtr,
              ffi.Pointer<ffi.Void>,
              ffi.UintPtr)>>('etebase_item_manager_create_raw');
  late final _etebase_item_manager_create_raw =
      _etebase_item_manager_create_rawPtr.asFunction<
          ffi.Pointer<EtebaseItem> Function(ffi.Pointer<EtebaseItemManager>,
              ffi.Pointer<ffi.Void>, int, ffi.Pointer<ffi.Void>, int)>();

  /// Fetch all items of a collection and return a list response
  ///
  /// @param this_ the object handle
  /// @param fetch_options the `EtebaseFetchOptions` to fetch with
  ffi.Pointer<EtebaseItemListResponse> etebase_item_manager_list(
    ffi.Pointer<EtebaseItemManager> this_,
    ffi.Pointer<EtebaseFetchOptions> fetch_options,
  ) {
    return _etebase_item_manager_list(
      this_,
      fetch_options,
    );
  }

  late final _etebase_item_manager_listPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<EtebaseItemListResponse> Function(
              ffi.Pointer<EtebaseItemManager>,
              ffi.Pointer<EtebaseFetchOptions>)>>('etebase_item_manager_list');
  late final _etebase_item_manager_list =
      _etebase_item_manager_listPtr.asFunction<
          ffi.Pointer<EtebaseItemListResponse> Function(
              ffi.Pointer<EtebaseItemManager>,
              ffi.Pointer<EtebaseFetchOptions>)>();

  /// Fetch and return a list response of items with each item as the revision
  ///
  /// @param this_ the object handle
  /// @param item the item for which to fetch the revision history
  /// @param fetch_options the `EtebaseFetchOptions` to fetch with
  ffi.Pointer<EtebaseItemRevisionsListResponse>
      etebase_item_manager_item_revisions(
    ffi.Pointer<EtebaseItemManager> this_,
    ffi.Pointer<EtebaseItem> item,
    ffi.Pointer<EtebaseFetchOptions> fetch_options,
  ) {
    return _etebase_item_manager_item_revisions(
      this_,
      item,
      fetch_options,
    );
  }

  late final _etebase_item_manager_item_revisionsPtr = _lookup<
          ffi.NativeFunction<
              ffi.Pointer<EtebaseItemRevisionsListResponse> Function(
                  ffi.Pointer<EtebaseItemManager>,
                  ffi.Pointer<EtebaseItem>,
                  ffi.Pointer<EtebaseFetchOptions>)>>(
      'etebase_item_manager_item_revisions');
  late final _etebase_item_manager_item_revisions =
      _etebase_item_manager_item_revisionsPtr.asFunction<
          ffi.Pointer<EtebaseItemRevisionsListResponse> Function(
              ffi.Pointer<EtebaseItemManager>,
              ffi.Pointer<EtebaseItem>,
              ffi.Pointer<EtebaseFetchOptions>)>();

  /// Fetch the latest revision of the supplied items from the server and return a list response
  ///
  /// @param this_ the object handle
  /// @param items the list of items to be fetched
  /// @param items_size the number of items
  /// @param fetch_options the `EtebaseFetchOptions` to fetch with
  ffi.Pointer<EtebaseItemListResponse> etebase_item_manager_fetch_updates(
    ffi.Pointer<EtebaseItemManager> this_,
    ffi.Pointer<ffi.Pointer<EtebaseItem>> items,
    int items_size,
    ffi.Pointer<EtebaseFetchOptions> fetch_options,
  ) {
    return _etebase_item_manager_fetch_updates(
      this_,
      items,
      items_size,
      fetch_options,
    );
  }

  late final _etebase_item_manager_fetch_updatesPtr = _lookup<
          ffi.NativeFunction<
              ffi.Pointer<EtebaseItemListResponse> Function(
                  ffi.Pointer<EtebaseItemManager>,
                  ffi.Pointer<ffi.Pointer<EtebaseItem>>,
                  ffi.UintPtr,
                  ffi.Pointer<EtebaseFetchOptions>)>>(
      'etebase_item_manager_fetch_updates');
  late final _etebase_item_manager_fetch_updates =
      _etebase_item_manager_fetch_updatesPtr.asFunction<
          ffi.Pointer<EtebaseItemListResponse> Function(
              ffi.Pointer<EtebaseItemManager>,
              ffi.Pointer<ffi.Pointer<EtebaseItem>>,
              int,
              ffi.Pointer<EtebaseFetchOptions>)>();

  /// Fetch multiple Items using their UID
  ///
  /// See etebase_item_manager_fetch for fetching a single item
  ///
  /// @param this_ the object handle
  /// @param items the list of item uids to be fetched
  /// @param items_size the number of items
  /// @param fetch_options the `EtebaseFetchOptions` to fetch with
  ffi.Pointer<EtebaseItemListResponse> etebase_item_manager_fetch_multi(
    ffi.Pointer<EtebaseItemManager> this_,
    ffi.Pointer<ffi.Pointer<ffi.Char>> items,
    int items_size,
    ffi.Pointer<EtebaseFetchOptions> fetch_options,
  ) {
    return _etebase_item_manager_fetch_multi(
      this_,
      items,
      items_size,
      fetch_options,
    );
  }

  late final _etebase_item_manager_fetch_multiPtr = _lookup<
          ffi.NativeFunction<
              ffi.Pointer<EtebaseItemListResponse> Function(
                  ffi.Pointer<EtebaseItemManager>,
                  ffi.Pointer<ffi.Pointer<ffi.Char>>,
                  ffi.UintPtr,
                  ffi.Pointer<EtebaseFetchOptions>)>>(
      'etebase_item_manager_fetch_multi');
  late final _etebase_item_manager_fetch_multi =
      _etebase_item_manager_fetch_multiPtr.asFunction<
          ffi.Pointer<EtebaseItemListResponse> Function(
              ffi.Pointer<EtebaseItemManager>,
              ffi.Pointer<ffi.Pointer<ffi.Char>>,
              int,
              ffi.Pointer<EtebaseFetchOptions>)>();

  /// Upload the supplied items to the server
  ///
  /// @param this_ the object handle
  /// @param items the list of items to be uploaded
  /// @param items_size the number of items
  /// @param fetch_options the `EtebaseFetchOptions` to upload with
  int etebase_item_manager_batch(
    ffi.Pointer<EtebaseItemManager> this_,
    ffi.Pointer<ffi.Pointer<EtebaseItem>> items,
    int items_size,
    ffi.Pointer<EtebaseFetchOptions> fetch_options,
  ) {
    return _etebase_item_manager_batch(
      this_,
      items,
      items_size,
      fetch_options,
    );
  }

  late final _etebase_item_manager_batchPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(
              ffi.Pointer<EtebaseItemManager>,
              ffi.Pointer<ffi.Pointer<EtebaseItem>>,
              ffi.UintPtr,
              ffi.Pointer<EtebaseFetchOptions>)>>('etebase_item_manager_batch');
  late final _etebase_item_manager_batch =
      _etebase_item_manager_batchPtr.asFunction<
          int Function(
              ffi.Pointer<EtebaseItemManager>,
              ffi.Pointer<ffi.Pointer<EtebaseItem>>,
              int,
              ffi.Pointer<EtebaseFetchOptions>)>();

  /// Upload the supplied items to the server with a list of items as dependencies
  ///
  /// This will fail if the dependencies have changed remotely
  ///
  /// @param this_ the object handle
  /// @param items the list of items to be uploaded
  /// @param items_size the number of items
  /// @param deps the list of items to be treated as dependencies
  /// @param deps_size the number of dependencies
  /// @param fetch_options the `EtebaseFetchOptions` to upload with
  int etebase_item_manager_batch_deps(
    ffi.Pointer<EtebaseItemManager> this_,
    ffi.Pointer<ffi.Pointer<EtebaseItem>> items,
    int items_size,
    ffi.Pointer<ffi.Pointer<EtebaseItem>> deps,
    int deps_size,
    ffi.Pointer<EtebaseFetchOptions> fetch_options,
  ) {
    return _etebase_item_manager_batch_deps(
      this_,
      items,
      items_size,
      deps,
      deps_size,
      fetch_options,
    );
  }

  late final _etebase_item_manager_batch_depsPtr = _lookup<
          ffi.NativeFunction<
              ffi.Int32 Function(
                  ffi.Pointer<EtebaseItemManager>,
                  ffi.Pointer<ffi.Pointer<EtebaseItem>>,
                  ffi.UintPtr,
                  ffi.Pointer<ffi.Pointer<EtebaseItem>>,
                  ffi.UintPtr,
                  ffi.Pointer<EtebaseFetchOptions>)>>(
      'etebase_item_manager_batch_deps');
  late final _etebase_item_manager_batch_deps =
      _etebase_item_manager_batch_depsPtr.asFunction<
          int Function(
              ffi.Pointer<EtebaseItemManager>,
              ffi.Pointer<ffi.Pointer<EtebaseItem>>,
              int,
              ffi.Pointer<ffi.Pointer<EtebaseItem>>,
              int,
              ffi.Pointer<EtebaseFetchOptions>)>();

  /// Upload items using a transaction
  ///
  /// This call ensures that the items haven't changed since we last fetched them
  ///
  /// @param this_ the object handle
  /// @param items the list of items to be uploaded
  /// @param items_size the number of items
  /// @param fetch_options the `EtebaseFetchOptions` to upload with
  int etebase_item_manager_transaction(
    ffi.Pointer<EtebaseItemManager> this_,
    ffi.Pointer<ffi.Pointer<EtebaseItem>> items,
    int items_size,
    ffi.Pointer<EtebaseFetchOptions> fetch_options,
  ) {
    return _etebase_item_manager_transaction(
      this_,
      items,
      items_size,
      fetch_options,
    );
  }

  late final _etebase_item_manager_transactionPtr = _lookup<
          ffi.NativeFunction<
              ffi.Int32 Function(
                  ffi.Pointer<EtebaseItemManager>,
                  ffi.Pointer<ffi.Pointer<EtebaseItem>>,
                  ffi.UintPtr,
                  ffi.Pointer<EtebaseFetchOptions>)>>(
      'etebase_item_manager_transaction');
  late final _etebase_item_manager_transaction =
      _etebase_item_manager_transactionPtr.asFunction<
          int Function(
              ffi.Pointer<EtebaseItemManager>,
              ffi.Pointer<ffi.Pointer<EtebaseItem>>,
              int,
              ffi.Pointer<EtebaseFetchOptions>)>();

  /// Upload items using a transaction with a list of items as dependencies
  ///
  /// @param this_ the object handle
  /// @param items the list of items to be uploaded
  /// @param items_size the number of items
  /// @param deps the list of items to be treated as dependencies
  /// @param deps_size the number of dependencies
  /// @param fetch_options the `EtebaseFetchOptions` to upload with
  int etebase_item_manager_transaction_deps(
    ffi.Pointer<EtebaseItemManager> this_,
    ffi.Pointer<ffi.Pointer<EtebaseItem>> items,
    int items_size,
    ffi.Pointer<ffi.Pointer<EtebaseItem>> deps,
    int deps_size,
    ffi.Pointer<EtebaseFetchOptions> fetch_options,
  ) {
    return _etebase_item_manager_transaction_deps(
      this_,
      items,
      items_size,
      deps,
      deps_size,
      fetch_options,
    );
  }

  late final _etebase_item_manager_transaction_depsPtr = _lookup<
          ffi.NativeFunction<
              ffi.Int32 Function(
                  ffi.Pointer<EtebaseItemManager>,
                  ffi.Pointer<ffi.Pointer<EtebaseItem>>,
                  ffi.UintPtr,
                  ffi.Pointer<ffi.Pointer<EtebaseItem>>,
                  ffi.UintPtr,
                  ffi.Pointer<EtebaseFetchOptions>)>>(
      'etebase_item_manager_transaction_deps');
  late final _etebase_item_manager_transaction_deps =
      _etebase_item_manager_transaction_depsPtr.asFunction<
          int Function(
              ffi.Pointer<EtebaseItemManager>,
              ffi.Pointer<ffi.Pointer<EtebaseItem>>,
              int,
              ffi.Pointer<ffi.Pointer<EtebaseItem>>,
              int,
              ffi.Pointer<EtebaseFetchOptions>)>();

  /// Load and return a cached item from a byte buffer
  ///
  /// @param this_ the object handle
  /// @param cached the byte buffer holding the cached item obtained using [cache_save]
  /// @param cached_size size of the buffer
  ffi.Pointer<EtebaseItem> etebase_item_manager_cache_load(
    ffi.Pointer<EtebaseItemManager> this_,
    ffi.Pointer<ffi.Void> cached,
    int cached_size,
  ) {
    return _etebase_item_manager_cache_load(
      this_,
      cached,
      cached_size,
    );
  }

  late final _etebase_item_manager_cache_loadPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<EtebaseItem> Function(
              ffi.Pointer<EtebaseItemManager>,
              ffi.Pointer<ffi.Void>,
              ffi.UintPtr)>>('etebase_item_manager_cache_load');
  late final _etebase_item_manager_cache_load =
      _etebase_item_manager_cache_loadPtr.asFunction<
          ffi.Pointer<EtebaseItem> Function(
              ffi.Pointer<EtebaseItemManager>, ffi.Pointer<ffi.Void>, int)>();

  /// Save the item object to a byte buffer for caching
  ///
  /// The item can later be loaded using `etebase_item_manager_cache_load`
  ///
  /// @param this_ the object handle
  /// @param item the item object to be cached
  /// @param[out] ret_size to hold the size of the returned buffer
  ffi.Pointer<ffi.Void> etebase_item_manager_cache_save(
    ffi.Pointer<EtebaseItemManager> this_,
    ffi.Pointer<EtebaseItem> item,
    ffi.Pointer<ffi.UintPtr> ret_size,
  ) {
    return _etebase_item_manager_cache_save(
      this_,
      item,
      ret_size,
    );
  }

  late final _etebase_item_manager_cache_savePtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Void> Function(
              ffi.Pointer<EtebaseItemManager>,
              ffi.Pointer<EtebaseItem>,
              ffi.Pointer<ffi.UintPtr>)>>('etebase_item_manager_cache_save');
  late final _etebase_item_manager_cache_save =
      _etebase_item_manager_cache_savePtr.asFunction<
          ffi.Pointer<ffi.Void> Function(ffi.Pointer<EtebaseItemManager>,
              ffi.Pointer<EtebaseItem>, ffi.Pointer<ffi.UintPtr>)>();

  /// Save the item object and its content to a byte buffer for caching
  ///
  /// The item can later be loaded using `etebase_item_manager_cache_load`
  ///
  /// @param this_ the object handle
  /// @param item the item object to be cached
  /// @param[out] ret_size to hold the size of the returned buffer
  ffi.Pointer<ffi.Void> etebase_item_manager_cache_save_with_content(
    ffi.Pointer<EtebaseItemManager> this_,
    ffi.Pointer<EtebaseItem> item,
    ffi.Pointer<ffi.UintPtr> ret_size,
  ) {
    return _etebase_item_manager_cache_save_with_content(
      this_,
      item,
      ret_size,
    );
  }

  late final _etebase_item_manager_cache_save_with_contentPtr = _lookup<
          ffi.NativeFunction<
              ffi.Pointer<ffi.Void> Function(ffi.Pointer<EtebaseItemManager>,
                  ffi.Pointer<EtebaseItem>, ffi.Pointer<ffi.UintPtr>)>>(
      'etebase_item_manager_cache_save_with_content');
  late final _etebase_item_manager_cache_save_with_content =
      _etebase_item_manager_cache_save_with_contentPtr.asFunction<
          ffi.Pointer<ffi.Void> Function(ffi.Pointer<EtebaseItemManager>,
              ffi.Pointer<EtebaseItem>, ffi.Pointer<ffi.UintPtr>)>();

  /// Destroy the object
  ///
  /// @param this_ the object handle
  void etebase_item_manager_destroy(
    ffi.Pointer<EtebaseItemManager> this_,
  ) {
    return _etebase_item_manager_destroy(
      this_,
    );
  }

  late final _etebase_item_manager_destroyPtr = _lookup<
          ffi
          .NativeFunction<ffi.Void Function(ffi.Pointer<EtebaseItemManager>)>>(
      'etebase_item_manager_destroy');
  late final _etebase_item_manager_destroy = _etebase_item_manager_destroyPtr
      .asFunction<void Function(ffi.Pointer<EtebaseItemManager>)>();

  /// Clone a collection object
  ///
  /// @param this_ the object handle
  ffi.Pointer<EtebaseCollection> etebase_collection_clone(
    ffi.Pointer<EtebaseCollection> this_,
  ) {
    return _etebase_collection_clone(
      this_,
    );
  }

  late final _etebase_collection_clonePtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<EtebaseCollection> Function(
              ffi.Pointer<EtebaseCollection>)>>('etebase_collection_clone');
  late final _etebase_collection_clone =
      _etebase_collection_clonePtr.asFunction<
          ffi.Pointer<EtebaseCollection> Function(
              ffi.Pointer<EtebaseCollection>)>();

  /// Manually verify the integrity of the collection
  ///
  /// This is also done automatically by the API
  ///
  /// @param this_ the object handle
  bool etebase_collection_verify(
    ffi.Pointer<EtebaseCollection> this_,
  ) {
    return _etebase_collection_verify(
      this_,
    );
  }

  late final _etebase_collection_verifyPtr = _lookup<
          ffi
          .NativeFunction<ffi.Bool Function(ffi.Pointer<EtebaseCollection>)>>(
      'etebase_collection_verify');
  late final _etebase_collection_verify = _etebase_collection_verifyPtr
      .asFunction<bool Function(ffi.Pointer<EtebaseCollection>)>();

  /// Set metadata for the collection object
  ///
  /// @param this_ the object handle
  /// @param meta the metadata object to be set for the collection
  int etebase_collection_set_meta(
    ffi.Pointer<EtebaseCollection> this_,
    ffi.Pointer<EtebaseItemMetadata> meta,
  ) {
    return _etebase_collection_set_meta(
      this_,
      meta,
    );
  }

  late final _etebase_collection_set_metaPtr = _lookup<
          ffi.NativeFunction<
              ffi.Int32 Function(ffi.Pointer<EtebaseCollection>,
                  ffi.Pointer<EtebaseItemMetadata>)>>(
      'etebase_collection_set_meta');
  late final _etebase_collection_set_meta =
      _etebase_collection_set_metaPtr.asFunction<
          int Function(ffi.Pointer<EtebaseCollection>,
              ffi.Pointer<EtebaseItemMetadata>)>();

  /// Return the metadata of the collection
  ///
  /// @param this_ the object handle
  ffi.Pointer<EtebaseItemMetadata> etebase_collection_get_meta(
    ffi.Pointer<EtebaseCollection> this_,
  ) {
    return _etebase_collection_get_meta(
      this_,
    );
  }

  late final _etebase_collection_get_metaPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<EtebaseItemMetadata> Function(
              ffi.Pointer<EtebaseCollection>)>>('etebase_collection_get_meta');
  late final _etebase_collection_get_meta =
      _etebase_collection_get_metaPtr.asFunction<
          ffi.Pointer<EtebaseItemMetadata> Function(
              ffi.Pointer<EtebaseCollection>)>();

  /// Set metadata for the collection object from a byte array
  ///
  /// @param this_ the object handle
  /// @param meta the metadata for the collection. This needs to be a valid `EtebaseItemMetadata`-like struct encoded using `msgpack`.
  /// @param meta_size the metadata size
  int etebase_collection_set_meta_raw(
    ffi.Pointer<EtebaseCollection> this_,
    ffi.Pointer<ffi.Void> meta,
    int meta_size,
  ) {
    return _etebase_collection_set_meta_raw(
      this_,
      meta,
      meta_size,
    );
  }

  late final _etebase_collection_set_meta_rawPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(
              ffi.Pointer<EtebaseCollection>,
              ffi.Pointer<ffi.Void>,
              ffi.UintPtr)>>('etebase_collection_set_meta_raw');
  late final _etebase_collection_set_meta_raw =
      _etebase_collection_set_meta_rawPtr.asFunction<
          int Function(
              ffi.Pointer<EtebaseCollection>, ffi.Pointer<ffi.Void>, int)>();

  /// Write the metadata of the collection to a byte array and return its length
  ///
  /// @param this_ the object handle
  /// @param[out] buf the output byte buffer
  /// @param buf_size the maximum number of bytes to be written to buf
  int etebase_collection_get_meta_raw(
    ffi.Pointer<EtebaseCollection> this_,
    ffi.Pointer<ffi.Void> buf,
    int buf_size,
  ) {
    return _etebase_collection_get_meta_raw(
      this_,
      buf,
      buf_size,
    );
  }

  late final _etebase_collection_get_meta_rawPtr = _lookup<
      ffi.NativeFunction<
          ffi.IntPtr Function(
              ffi.Pointer<EtebaseCollection>,
              ffi.Pointer<ffi.Void>,
              ffi.UintPtr)>>('etebase_collection_get_meta_raw');
  late final _etebase_collection_get_meta_raw =
      _etebase_collection_get_meta_rawPtr.asFunction<
          int Function(
              ffi.Pointer<EtebaseCollection>, ffi.Pointer<ffi.Void>, int)>();

  /// Set the content of the collection
  ///
  /// @param this_ the object handle
  /// @param content the content of the collection as a byte array
  /// @param content_size the content size
  int etebase_collection_set_content(
    ffi.Pointer<EtebaseCollection> this_,
    ffi.Pointer<ffi.Void> content,
    int content_size,
  ) {
    return _etebase_collection_set_content(
      this_,
      content,
      content_size,
    );
  }

  late final _etebase_collection_set_contentPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(
              ffi.Pointer<EtebaseCollection>,
              ffi.Pointer<ffi.Void>,
              ffi.UintPtr)>>('etebase_collection_set_content');
  late final _etebase_collection_set_content =
      _etebase_collection_set_contentPtr.asFunction<
          int Function(
              ffi.Pointer<EtebaseCollection>, ffi.Pointer<ffi.Void>, int)>();

  /// Write the content of the collection to a byte array and return its length
  ///
  /// @param this_ the object handle
  /// @param[out] buf the output byte buffer
  /// @param buf_size the maximum number of bytes to be written to buf
  int etebase_collection_get_content(
    ffi.Pointer<EtebaseCollection> this_,
    ffi.Pointer<ffi.Void> buf,
    int buf_size,
  ) {
    return _etebase_collection_get_content(
      this_,
      buf,
      buf_size,
    );
  }

  late final _etebase_collection_get_contentPtr = _lookup<
      ffi.NativeFunction<
          ffi.IntPtr Function(
              ffi.Pointer<EtebaseCollection>,
              ffi.Pointer<ffi.Void>,
              ffi.UintPtr)>>('etebase_collection_get_content');
  late final _etebase_collection_get_content =
      _etebase_collection_get_contentPtr.asFunction<
          int Function(
              ffi.Pointer<EtebaseCollection>, ffi.Pointer<ffi.Void>, int)>();

  /// Mark the collection as deleted
  ///
  /// The collection needs to be \ref uploaded `etebase_collection_manager_upload` for this to take effect
  ///
  /// @param this_ the object handle
  int etebase_collection_delete(
    ffi.Pointer<EtebaseCollection> this_,
  ) {
    return _etebase_collection_delete(
      this_,
    );
  }

  late final _etebase_collection_deletePtr = _lookup<
          ffi
          .NativeFunction<ffi.Int32 Function(ffi.Pointer<EtebaseCollection>)>>(
      'etebase_collection_delete');
  late final _etebase_collection_delete = _etebase_collection_deletePtr
      .asFunction<int Function(ffi.Pointer<EtebaseCollection>)>();

  /// Check whether the collection is marked as deleted
  ///
  /// @param this_ the object handle
  bool etebase_collection_is_deleted(
    ffi.Pointer<EtebaseCollection> this_,
  ) {
    return _etebase_collection_is_deleted(
      this_,
    );
  }

  late final _etebase_collection_is_deletedPtr = _lookup<
          ffi
          .NativeFunction<ffi.Bool Function(ffi.Pointer<EtebaseCollection>)>>(
      'etebase_collection_is_deleted');
  late final _etebase_collection_is_deleted = _etebase_collection_is_deletedPtr
      .asFunction<bool Function(ffi.Pointer<EtebaseCollection>)>();

  /// The UID of the collection
  ///
  /// @param this_ the object handle
  ffi.Pointer<ffi.Char> etebase_collection_get_uid(
    ffi.Pointer<EtebaseCollection> this_,
  ) {
    return _etebase_collection_get_uid(
      this_,
    );
  }

  late final _etebase_collection_get_uidPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(
              ffi.Pointer<EtebaseCollection>)>>('etebase_collection_get_uid');
  late final _etebase_collection_get_uid =
      _etebase_collection_get_uidPtr.asFunction<
          ffi.Pointer<ffi.Char> Function(ffi.Pointer<EtebaseCollection>)>();

  /// The etag of the collection
  ///
  /// @param this_ the object handle
  ffi.Pointer<ffi.Char> etebase_collection_get_etag(
    ffi.Pointer<EtebaseCollection> this_,
  ) {
    return _etebase_collection_get_etag(
      this_,
    );
  }

  late final _etebase_collection_get_etagPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(
              ffi.Pointer<EtebaseCollection>)>>('etebase_collection_get_etag');
  late final _etebase_collection_get_etag =
      _etebase_collection_get_etagPtr.asFunction<
          ffi.Pointer<ffi.Char> Function(ffi.Pointer<EtebaseCollection>)>();

  /// The sync token for the collection
  ///
  /// The sync token reflects changes to the collection properties or its items on the server
  ///
  /// @param this_ the object handle
  ffi.Pointer<ffi.Char> etebase_collection_get_stoken(
    ffi.Pointer<EtebaseCollection> this_,
  ) {
    return _etebase_collection_get_stoken(
      this_,
    );
  }

  late final _etebase_collection_get_stokenPtr = _lookup<
          ffi.NativeFunction<
              ffi.Pointer<ffi.Char> Function(ffi.Pointer<EtebaseCollection>)>>(
      'etebase_collection_get_stoken');
  late final _etebase_collection_get_stoken =
      _etebase_collection_get_stokenPtr.asFunction<
          ffi.Pointer<ffi.Char> Function(ffi.Pointer<EtebaseCollection>)>();

  /// Return the collection as an item
  ///
  /// @param this_ the object handle
  ffi.Pointer<EtebaseItem> etebase_collection_as_item(
    ffi.Pointer<EtebaseCollection> this_,
  ) {
    return _etebase_collection_as_item(
      this_,
    );
  }

  late final _etebase_collection_as_itemPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<EtebaseItem> Function(
              ffi.Pointer<EtebaseCollection>)>>('etebase_collection_as_item');
  late final _etebase_collection_as_item =
      _etebase_collection_as_itemPtr.asFunction<
          ffi.Pointer<EtebaseItem> Function(ffi.Pointer<EtebaseCollection>)>();

  /// The type of the collection
  ///
  /// @param this_ the object handle
  ffi.Pointer<ffi.Char> etebase_collection_get_collection_type(
    ffi.Pointer<EtebaseCollection> this_,
  ) {
    return _etebase_collection_get_collection_type(
      this_,
    );
  }

  late final _etebase_collection_get_collection_typePtr = _lookup<
          ffi.NativeFunction<
              ffi.Pointer<ffi.Char> Function(ffi.Pointer<EtebaseCollection>)>>(
      'etebase_collection_get_collection_type');
  late final _etebase_collection_get_collection_type =
      _etebase_collection_get_collection_typePtr.asFunction<
          ffi.Pointer<ffi.Char> Function(ffi.Pointer<EtebaseCollection>)>();

  /// Return the access level of the collection for the current user
  ///
  /// @param this_ the object handle
  int etebase_collection_get_access_level(
    ffi.Pointer<EtebaseCollection> this_,
  ) {
    return _etebase_collection_get_access_level(
      this_,
    );
  }

  late final _etebase_collection_get_access_levelPtr = _lookup<
          ffi.NativeFunction<
              EtebaseCollectionAccessLevel Function(
                  ffi.Pointer<EtebaseCollection>)>>(
      'etebase_collection_get_access_level');
  late final _etebase_collection_get_access_level =
      _etebase_collection_get_access_levelPtr
          .asFunction<int Function(ffi.Pointer<EtebaseCollection>)>();

  /// Destroy the object
  ///
  /// @param this_ the object handle
  void etebase_collection_destroy(
    ffi.Pointer<EtebaseCollection> this_,
  ) {
    return _etebase_collection_destroy(
      this_,
    );
  }

  late final _etebase_collection_destroyPtr = _lookup<
          ffi
          .NativeFunction<ffi.Void Function(ffi.Pointer<EtebaseCollection>)>>(
      'etebase_collection_destroy');
  late final _etebase_collection_destroy = _etebase_collection_destroyPtr
      .asFunction<void Function(ffi.Pointer<EtebaseCollection>)>();

  /// Clone an item object
  ///
  /// @param this_ the object handle
  ffi.Pointer<EtebaseItem> etebase_item_clone(
    ffi.Pointer<EtebaseItem> this_,
  ) {
    return _etebase_item_clone(
      this_,
    );
  }

  late final _etebase_item_clonePtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<EtebaseItem> Function(
              ffi.Pointer<EtebaseItem>)>>('etebase_item_clone');
  late final _etebase_item_clone = _etebase_item_clonePtr.asFunction<
      ffi.Pointer<EtebaseItem> Function(ffi.Pointer<EtebaseItem>)>();

  /// Manually verify the integrity of the item
  ///
  /// This is also done automatically by the API
  ///
  /// @param this_ the object handle
  bool etebase_item_verify(
    ffi.Pointer<EtebaseItem> this_,
  ) {
    return _etebase_item_verify(
      this_,
    );
  }

  late final _etebase_item_verifyPtr =
      _lookup<ffi.NativeFunction<ffi.Bool Function(ffi.Pointer<EtebaseItem>)>>(
          'etebase_item_verify');
  late final _etebase_item_verify = _etebase_item_verifyPtr
      .asFunction<bool Function(ffi.Pointer<EtebaseItem>)>();

  /// Set metadata for the item object
  ///
  /// @param this_ the object handle
  /// @param meta the metadata object to be set for the item
  int etebase_item_set_meta(
    ffi.Pointer<EtebaseItem> this_,
    ffi.Pointer<EtebaseItemMetadata> meta,
  ) {
    return _etebase_item_set_meta(
      this_,
      meta,
    );
  }

  late final _etebase_item_set_metaPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Pointer<EtebaseItem>,
              ffi.Pointer<EtebaseItemMetadata>)>>('etebase_item_set_meta');
  late final _etebase_item_set_meta = _etebase_item_set_metaPtr.asFunction<
      int Function(
          ffi.Pointer<EtebaseItem>, ffi.Pointer<EtebaseItemMetadata>)>();

  /// Return the metadata of the item
  ///
  /// @param this_ the object handle
  ffi.Pointer<EtebaseItemMetadata> etebase_item_get_meta(
    ffi.Pointer<EtebaseItem> this_,
  ) {
    return _etebase_item_get_meta(
      this_,
    );
  }

  late final _etebase_item_get_metaPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<EtebaseItemMetadata> Function(
              ffi.Pointer<EtebaseItem>)>>('etebase_item_get_meta');
  late final _etebase_item_get_meta = _etebase_item_get_metaPtr.asFunction<
      ffi.Pointer<EtebaseItemMetadata> Function(ffi.Pointer<EtebaseItem>)>();

  /// Set metadata for the item object from a byte array
  ///
  /// @param this_ the object handle
  /// @param meta the metadata for the item. This needs to be a valid `EtebaseItemMetadata`-like struct encoded using `msgpack`.
  /// @param meta_size the metadata size
  int etebase_item_set_meta_raw(
    ffi.Pointer<EtebaseItem> this_,
    ffi.Pointer<ffi.Void> meta,
    int meta_size,
  ) {
    return _etebase_item_set_meta_raw(
      this_,
      meta,
      meta_size,
    );
  }

  late final _etebase_item_set_meta_rawPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Pointer<EtebaseItem>, ffi.Pointer<ffi.Void>,
              ffi.UintPtr)>>('etebase_item_set_meta_raw');
  late final _etebase_item_set_meta_raw =
      _etebase_item_set_meta_rawPtr.asFunction<
          int Function(ffi.Pointer<EtebaseItem>, ffi.Pointer<ffi.Void>, int)>();

  /// Write the metadata of the item to a byte array and return its length
  ///
  /// @param this_ the object handle
  /// @param[out] buf the output byte buffer
  /// @param buf_size the maximum number of bytes to be written to buf
  int etebase_item_get_meta_raw(
    ffi.Pointer<EtebaseItem> this_,
    ffi.Pointer<ffi.Void> buf,
    int buf_size,
  ) {
    return _etebase_item_get_meta_raw(
      this_,
      buf,
      buf_size,
    );
  }

  late final _etebase_item_get_meta_rawPtr = _lookup<
      ffi.NativeFunction<
          ffi.IntPtr Function(ffi.Pointer<EtebaseItem>, ffi.Pointer<ffi.Void>,
              ffi.UintPtr)>>('etebase_item_get_meta_raw');
  late final _etebase_item_get_meta_raw =
      _etebase_item_get_meta_rawPtr.asFunction<
          int Function(ffi.Pointer<EtebaseItem>, ffi.Pointer<ffi.Void>, int)>();

  /// Set the content of the item
  ///
  /// @param this_ the object handle
  /// @param content the content of the item as a byte array
  /// @param content_size the content size
  int etebase_item_set_content(
    ffi.Pointer<EtebaseItem> this_,
    ffi.Pointer<ffi.Void> content,
    int content_size,
  ) {
    return _etebase_item_set_content(
      this_,
      content,
      content_size,
    );
  }

  late final _etebase_item_set_contentPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Pointer<EtebaseItem>, ffi.Pointer<ffi.Void>,
              ffi.UintPtr)>>('etebase_item_set_content');
  late final _etebase_item_set_content =
      _etebase_item_set_contentPtr.asFunction<
          int Function(ffi.Pointer<EtebaseItem>, ffi.Pointer<ffi.Void>, int)>();

  /// Write the content of the item to a byte array and return its length
  ///
  /// @param this_ the object handle
  /// @param[out] buf the output byte buffer
  /// @param buf_size the maximum number of bytes to be written to buf
  int etebase_item_get_content(
    ffi.Pointer<EtebaseItem> this_,
    ffi.Pointer<ffi.Void> buf,
    int buf_size,
  ) {
    return _etebase_item_get_content(
      this_,
      buf,
      buf_size,
    );
  }

  late final _etebase_item_get_contentPtr = _lookup<
      ffi.NativeFunction<
          ffi.IntPtr Function(ffi.Pointer<EtebaseItem>, ffi.Pointer<ffi.Void>,
              ffi.UintPtr)>>('etebase_item_get_content');
  late final _etebase_item_get_content =
      _etebase_item_get_contentPtr.asFunction<
          int Function(ffi.Pointer<EtebaseItem>, ffi.Pointer<ffi.Void>, int)>();

  /// Mark the item as deleted
  ///
  /// The item needs to be \ref uploaded `etebase_item_manager_batch` for this to take effect
  ///
  /// @param this_ the object handle
  int etebase_item_delete(
    ffi.Pointer<EtebaseItem> this_,
  ) {
    return _etebase_item_delete(
      this_,
    );
  }

  late final _etebase_item_deletePtr =
      _lookup<ffi.NativeFunction<ffi.Int32 Function(ffi.Pointer<EtebaseItem>)>>(
          'etebase_item_delete');
  late final _etebase_item_delete = _etebase_item_deletePtr
      .asFunction<int Function(ffi.Pointer<EtebaseItem>)>();

  /// Check whether the item is marked as deleted
  ///
  /// @param this_ the object handle
  bool etebase_item_is_deleted(
    ffi.Pointer<EtebaseItem> this_,
  ) {
    return _etebase_item_is_deleted(
      this_,
    );
  }

  late final _etebase_item_is_deletedPtr =
      _lookup<ffi.NativeFunction<ffi.Bool Function(ffi.Pointer<EtebaseItem>)>>(
          'etebase_item_is_deleted');
  late final _etebase_item_is_deleted = _etebase_item_is_deletedPtr
      .asFunction<bool Function(ffi.Pointer<EtebaseItem>)>();

  /// The UID of the item
  ///
  /// @param this_ the object handle
  ffi.Pointer<ffi.Char> etebase_item_get_uid(
    ffi.Pointer<EtebaseItem> this_,
  ) {
    return _etebase_item_get_uid(
      this_,
    );
  }

  late final _etebase_item_get_uidPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(
              ffi.Pointer<EtebaseItem>)>>('etebase_item_get_uid');
  late final _etebase_item_get_uid = _etebase_item_get_uidPtr
      .asFunction<ffi.Pointer<ffi.Char> Function(ffi.Pointer<EtebaseItem>)>();

  /// The etag of the item
  ///
  /// @param this_ the object handle
  ffi.Pointer<ffi.Char> etebase_item_get_etag(
    ffi.Pointer<EtebaseItem> this_,
  ) {
    return _etebase_item_get_etag(
      this_,
    );
  }

  late final _etebase_item_get_etagPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(
              ffi.Pointer<EtebaseItem>)>>('etebase_item_get_etag');
  late final _etebase_item_get_etag = _etebase_item_get_etagPtr
      .asFunction<ffi.Pointer<ffi.Char> Function(ffi.Pointer<EtebaseItem>)>();

  /// Destroy the object
  ///
  /// @param this_ the object handle
  void etebase_item_destroy(
    ffi.Pointer<EtebaseItem> this_,
  ) {
    return _etebase_item_destroy(
      this_,
    );
  }

  late final _etebase_item_destroyPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<EtebaseItem>)>>(
          'etebase_item_destroy');
  late final _etebase_item_destroy = _etebase_item_destroyPtr
      .asFunction<void Function(ffi.Pointer<EtebaseItem>)>();

  /// The user's identity public key
  ///
  /// This is used for identifying the user and safely sending them data (such as \ref invitations EtebaseSignedInvitation).
  ffi.Pointer<ffi.Void> etebase_user_profile_get_pubkey(
    ffi.Pointer<EtebaseUserProfile> this_,
  ) {
    return _etebase_user_profile_get_pubkey(
      this_,
    );
  }

  late final _etebase_user_profile_get_pubkeyPtr = _lookup<
          ffi.NativeFunction<
              ffi.Pointer<ffi.Void> Function(ffi.Pointer<EtebaseUserProfile>)>>(
      'etebase_user_profile_get_pubkey');
  late final _etebase_user_profile_get_pubkey =
      _etebase_user_profile_get_pubkeyPtr.asFunction<
          ffi.Pointer<ffi.Void> Function(ffi.Pointer<EtebaseUserProfile>)>();

  /// The size of the user's identity public key
  ///
  /// @param this_ the object handle
  int etebase_user_profile_get_pubkey_size(
    ffi.Pointer<EtebaseUserProfile> this_,
  ) {
    return _etebase_user_profile_get_pubkey_size(
      this_,
    );
  }

  late final _etebase_user_profile_get_pubkey_sizePtr = _lookup<
          ffi.NativeFunction<
              ffi.UintPtr Function(ffi.Pointer<EtebaseUserProfile>)>>(
      'etebase_user_profile_get_pubkey_size');
  late final _etebase_user_profile_get_pubkey_size =
      _etebase_user_profile_get_pubkey_sizePtr
          .asFunction<int Function(ffi.Pointer<EtebaseUserProfile>)>();

  /// Destroy the object
  ///
  /// @param this_ the object handle
  void etebase_user_profile_destroy(
    ffi.Pointer<EtebaseUserProfile> this_,
  ) {
    return _etebase_user_profile_destroy(
      this_,
    );
  }

  late final _etebase_user_profile_destroyPtr = _lookup<
          ffi
          .NativeFunction<ffi.Void Function(ffi.Pointer<EtebaseUserProfile>)>>(
      'etebase_user_profile_destroy');
  late final _etebase_user_profile_destroy = _etebase_user_profile_destroyPtr
      .asFunction<void Function(ffi.Pointer<EtebaseUserProfile>)>();

  /// Iterator for the list response
  ///
  /// @param this_ the object handle
  ffi.Pointer<ffi.Char> etebase_invitation_list_response_get_iterator(
    ffi.Pointer<EtebaseInvitationListResponse> this_,
  ) {
    return _etebase_invitation_list_response_get_iterator(
      this_,
    );
  }

  late final _etebase_invitation_list_response_get_iteratorPtr = _lookup<
          ffi.NativeFunction<
              ffi.Pointer<ffi.Char> Function(
                  ffi.Pointer<EtebaseInvitationListResponse>)>>(
      'etebase_invitation_list_response_get_iterator');
  late final _etebase_invitation_list_response_get_iterator =
      _etebase_invitation_list_response_get_iteratorPtr.asFunction<
          ffi.Pointer<ffi.Char> Function(
              ffi.Pointer<EtebaseInvitationListResponse>)>();

  /// List of invitations included in the response
  ///
  /// @param this_ the object handle
  /// @param[out] data the array to store the items in
  int etebase_invitation_list_response_get_data(
    ffi.Pointer<EtebaseInvitationListResponse> this_,
    ffi.Pointer<ffi.Pointer<EtebaseSignedInvitation>> data,
  ) {
    return _etebase_invitation_list_response_get_data(
      this_,
      data,
    );
  }

  late final _etebase_invitation_list_response_get_dataPtr = _lookup<
          ffi.NativeFunction<
              ffi.Int32 Function(ffi.Pointer<EtebaseInvitationListResponse>,
                  ffi.Pointer<ffi.Pointer<EtebaseSignedInvitation>>)>>(
      'etebase_invitation_list_response_get_data');
  late final _etebase_invitation_list_response_get_data =
      _etebase_invitation_list_response_get_dataPtr.asFunction<
          int Function(ffi.Pointer<EtebaseInvitationListResponse>,
              ffi.Pointer<ffi.Pointer<EtebaseSignedInvitation>>)>();

  /// The number of invitations included in the response
  ///
  /// @param this_ the object handle
  int etebase_invitation_list_response_get_data_length(
    ffi.Pointer<EtebaseInvitationListResponse> this_,
  ) {
    return _etebase_invitation_list_response_get_data_length(
      this_,
    );
  }

  late final _etebase_invitation_list_response_get_data_lengthPtr = _lookup<
          ffi.NativeFunction<
              ffi.UintPtr Function(
                  ffi.Pointer<EtebaseInvitationListResponse>)>>(
      'etebase_invitation_list_response_get_data_length');
  late final _etebase_invitation_list_response_get_data_length =
      _etebase_invitation_list_response_get_data_lengthPtr.asFunction<
          int Function(ffi.Pointer<EtebaseInvitationListResponse>)>();

  /// Indicates whether there is no more data to fetch
  ///
  /// @param this_ the object handle
  bool etebase_invitation_list_response_is_done(
    ffi.Pointer<EtebaseInvitationListResponse> this_,
  ) {
    return _etebase_invitation_list_response_is_done(
      this_,
    );
  }

  late final _etebase_invitation_list_response_is_donePtr = _lookup<
          ffi.NativeFunction<
              ffi.Bool Function(ffi.Pointer<EtebaseInvitationListResponse>)>>(
      'etebase_invitation_list_response_is_done');
  late final _etebase_invitation_list_response_is_done =
      _etebase_invitation_list_response_is_donePtr.asFunction<
          bool Function(ffi.Pointer<EtebaseInvitationListResponse>)>();

  /// Destroy the object
  ///
  /// @param this_ the object handle
  void etebase_invitation_list_response_destroy(
    ffi.Pointer<EtebaseInvitationListResponse> this_,
  ) {
    return _etebase_invitation_list_response_destroy(
      this_,
    );
  }

  late final _etebase_invitation_list_response_destroyPtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(ffi.Pointer<EtebaseInvitationListResponse>)>>(
      'etebase_invitation_list_response_destroy');
  late final _etebase_invitation_list_response_destroy =
      _etebase_invitation_list_response_destroyPtr.asFunction<
          void Function(ffi.Pointer<EtebaseInvitationListResponse>)>();

  /// List the incoming collection invitations for the account
  ///
  /// @param this_ the object handle
  /// @param fetch_options the `EtebaseFetchOptions` to fetch with
  ffi.Pointer<EtebaseInvitationListResponse>
      etebase_invitation_manager_list_incoming(
    ffi.Pointer<EtebaseCollectionInvitationManager> this_,
    ffi.Pointer<EtebaseFetchOptions> fetch_options,
  ) {
    return _etebase_invitation_manager_list_incoming(
      this_,
      fetch_options,
    );
  }

  late final _etebase_invitation_manager_list_incomingPtr = _lookup<
          ffi.NativeFunction<
              ffi.Pointer<EtebaseInvitationListResponse> Function(
                  ffi.Pointer<EtebaseCollectionInvitationManager>,
                  ffi.Pointer<EtebaseFetchOptions>)>>(
      'etebase_invitation_manager_list_incoming');
  late final _etebase_invitation_manager_list_incoming =
      _etebase_invitation_manager_list_incomingPtr.asFunction<
          ffi.Pointer<EtebaseInvitationListResponse> Function(
              ffi.Pointer<EtebaseCollectionInvitationManager>,
              ffi.Pointer<EtebaseFetchOptions>)>();

  /// List the outgoing collection invitations for the account
  ///
  /// @param this_ the object handle
  /// @param fetch_options the `EtebaseFetchOptions` to fetch with
  ffi.Pointer<EtebaseInvitationListResponse>
      etebase_invitation_manager_list_outgoing(
    ffi.Pointer<EtebaseCollectionInvitationManager> this_,
    ffi.Pointer<EtebaseFetchOptions> fetch_options,
  ) {
    return _etebase_invitation_manager_list_outgoing(
      this_,
      fetch_options,
    );
  }

  late final _etebase_invitation_manager_list_outgoingPtr = _lookup<
          ffi.NativeFunction<
              ffi.Pointer<EtebaseInvitationListResponse> Function(
                  ffi.Pointer<EtebaseCollectionInvitationManager>,
                  ffi.Pointer<EtebaseFetchOptions>)>>(
      'etebase_invitation_manager_list_outgoing');
  late final _etebase_invitation_manager_list_outgoing =
      _etebase_invitation_manager_list_outgoingPtr.asFunction<
          ffi.Pointer<EtebaseInvitationListResponse> Function(
              ffi.Pointer<EtebaseCollectionInvitationManager>,
              ffi.Pointer<EtebaseFetchOptions>)>();

  /// Accept an invitation
  ///
  /// @param this_ the object handle
  /// @param invitation the invitation to accept
  int etebase_invitation_manager_accept(
    ffi.Pointer<EtebaseCollectionInvitationManager> this_,
    ffi.Pointer<EtebaseSignedInvitation> invitation,
  ) {
    return _etebase_invitation_manager_accept(
      this_,
      invitation,
    );
  }

  late final _etebase_invitation_manager_acceptPtr = _lookup<
          ffi.NativeFunction<
              ffi.Int32 Function(
                  ffi.Pointer<EtebaseCollectionInvitationManager>,
                  ffi.Pointer<EtebaseSignedInvitation>)>>(
      'etebase_invitation_manager_accept');
  late final _etebase_invitation_manager_accept =
      _etebase_invitation_manager_acceptPtr.asFunction<
          int Function(ffi.Pointer<EtebaseCollectionInvitationManager>,
              ffi.Pointer<EtebaseSignedInvitation>)>();

  /// Reject an invitation
  ///
  /// @param this_ the object handle
  /// @param invitation the invitation to reject
  int etebase_invitation_manager_reject(
    ffi.Pointer<EtebaseCollectionInvitationManager> this_,
    ffi.Pointer<EtebaseSignedInvitation> invitation,
  ) {
    return _etebase_invitation_manager_reject(
      this_,
      invitation,
    );
  }

  late final _etebase_invitation_manager_rejectPtr = _lookup<
          ffi.NativeFunction<
              ffi.Int32 Function(
                  ffi.Pointer<EtebaseCollectionInvitationManager>,
                  ffi.Pointer<EtebaseSignedInvitation>)>>(
      'etebase_invitation_manager_reject');
  late final _etebase_invitation_manager_reject =
      _etebase_invitation_manager_rejectPtr.asFunction<
          int Function(ffi.Pointer<EtebaseCollectionInvitationManager>,
              ffi.Pointer<EtebaseSignedInvitation>)>();

  /// Fetch and return a user's profile
  ///
  /// @param this_ the object handle
  /// @param username the username of the user to fetch
  ffi.Pointer<EtebaseUserProfile> etebase_invitation_manager_fetch_user_profile(
    ffi.Pointer<EtebaseCollectionInvitationManager> this_,
    ffi.Pointer<ffi.Char> username,
  ) {
    return _etebase_invitation_manager_fetch_user_profile(
      this_,
      username,
    );
  }

  late final _etebase_invitation_manager_fetch_user_profilePtr = _lookup<
          ffi.NativeFunction<
              ffi.Pointer<EtebaseUserProfile> Function(
                  ffi.Pointer<EtebaseCollectionInvitationManager>,
                  ffi.Pointer<ffi.Char>)>>(
      'etebase_invitation_manager_fetch_user_profile');
  late final _etebase_invitation_manager_fetch_user_profile =
      _etebase_invitation_manager_fetch_user_profilePtr.asFunction<
          ffi.Pointer<EtebaseUserProfile> Function(
              ffi.Pointer<EtebaseCollectionInvitationManager>,
              ffi.Pointer<ffi.Char>)>();

  /// Invite a user to a collection
  ///
  /// @param this_ the object handle
  /// @param collection the collection to invite to
  /// @param username the username of the user to invite
  /// @param pubkey the public key of the user to invite
  /// @param pubkey_size the size of the public key
  /// @param access_level the level of access to give to user
  int etebase_invitation_manager_invite(
    ffi.Pointer<EtebaseCollectionInvitationManager> this_,
    ffi.Pointer<EtebaseCollection> collection,
    ffi.Pointer<ffi.Char> username,
    ffi.Pointer<ffi.Void> pubkey,
    int pubkey_size,
    int access_level,
  ) {
    return _etebase_invitation_manager_invite(
      this_,
      collection,
      username,
      pubkey,
      pubkey_size,
      access_level,
    );
  }

  late final _etebase_invitation_manager_invitePtr = _lookup<
          ffi.NativeFunction<
              ffi.Int32 Function(
                  ffi.Pointer<EtebaseCollectionInvitationManager>,
                  ffi.Pointer<EtebaseCollection>,
                  ffi.Pointer<ffi.Char>,
                  ffi.Pointer<ffi.Void>,
                  ffi.UintPtr,
                  EtebaseCollectionAccessLevel)>>(
      'etebase_invitation_manager_invite');
  late final _etebase_invitation_manager_invite =
      _etebase_invitation_manager_invitePtr.asFunction<
          int Function(
              ffi.Pointer<EtebaseCollectionInvitationManager>,
              ffi.Pointer<EtebaseCollection>,
              ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Void>,
              int,
              int)>();

  /// Cancel an invitation (disinvite)
  ///
  /// @param this_ the object handle
  /// @param invitation the invitation to cancel
  int etebase_invitation_manager_disinvite(
    ffi.Pointer<EtebaseCollectionInvitationManager> this_,
    ffi.Pointer<EtebaseSignedInvitation> invitation,
  ) {
    return _etebase_invitation_manager_disinvite(
      this_,
      invitation,
    );
  }

  late final _etebase_invitation_manager_disinvitePtr = _lookup<
          ffi.NativeFunction<
              ffi.Int32 Function(
                  ffi.Pointer<EtebaseCollectionInvitationManager>,
                  ffi.Pointer<EtebaseSignedInvitation>)>>(
      'etebase_invitation_manager_disinvite');
  late final _etebase_invitation_manager_disinvite =
      _etebase_invitation_manager_disinvitePtr.asFunction<
          int Function(ffi.Pointer<EtebaseCollectionInvitationManager>,
              ffi.Pointer<EtebaseSignedInvitation>)>();

  /// Our identity's public key
  ///
  /// This is the key users see when we send invitations.
  /// Can be pretty printed with `etebase_utils_pretty_fingerprint`.
  ///
  /// @param this_ the object handle
  ffi.Pointer<ffi.Void> etebase_invitation_manager_get_pubkey(
    ffi.Pointer<EtebaseCollectionInvitationManager> this_,
  ) {
    return _etebase_invitation_manager_get_pubkey(
      this_,
    );
  }

  late final _etebase_invitation_manager_get_pubkeyPtr = _lookup<
          ffi.NativeFunction<
              ffi.Pointer<ffi.Void> Function(
                  ffi.Pointer<EtebaseCollectionInvitationManager>)>>(
      'etebase_invitation_manager_get_pubkey');
  late final _etebase_invitation_manager_get_pubkey =
      _etebase_invitation_manager_get_pubkeyPtr.asFunction<
          ffi.Pointer<ffi.Void> Function(
              ffi.Pointer<EtebaseCollectionInvitationManager>)>();

  /// The size of our identity's public key
  ///
  /// @param this_ the object handle
  int etebase_invitation_manager_get_pubkey_size(
    ffi.Pointer<EtebaseCollectionInvitationManager> this_,
  ) {
    return _etebase_invitation_manager_get_pubkey_size(
      this_,
    );
  }

  late final _etebase_invitation_manager_get_pubkey_sizePtr = _lookup<
          ffi.NativeFunction<
              ffi.UintPtr Function(
                  ffi.Pointer<EtebaseCollectionInvitationManager>)>>(
      'etebase_invitation_manager_get_pubkey_size');
  late final _etebase_invitation_manager_get_pubkey_size =
      _etebase_invitation_manager_get_pubkey_sizePtr.asFunction<
          int Function(ffi.Pointer<EtebaseCollectionInvitationManager>)>();

  /// Destroy the object
  ///
  /// @param this_ the object handle
  void etebase_invitation_manager_destroy(
    ffi.Pointer<EtebaseCollectionInvitationManager> this_,
  ) {
    return _etebase_invitation_manager_destroy(
      this_,
    );
  }

  late final _etebase_invitation_manager_destroyPtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(
                  ffi.Pointer<EtebaseCollectionInvitationManager>)>>(
      'etebase_invitation_manager_destroy');
  late final _etebase_invitation_manager_destroy =
      _etebase_invitation_manager_destroyPtr.asFunction<
          void Function(ffi.Pointer<EtebaseCollectionInvitationManager>)>();

  /// Clone the invitation object
  ///
  /// @param this_ the object handle
  ffi.Pointer<EtebaseSignedInvitation> etebase_signed_invitation_clone(
    ffi.Pointer<EtebaseSignedInvitation> this_,
  ) {
    return _etebase_signed_invitation_clone(
      this_,
    );
  }

  late final _etebase_signed_invitation_clonePtr = _lookup<
          ffi.NativeFunction<
              ffi.Pointer<EtebaseSignedInvitation> Function(
                  ffi.Pointer<EtebaseSignedInvitation>)>>(
      'etebase_signed_invitation_clone');
  late final _etebase_signed_invitation_clone =
      _etebase_signed_invitation_clonePtr.asFunction<
          ffi.Pointer<EtebaseSignedInvitation> Function(
              ffi.Pointer<EtebaseSignedInvitation>)>();

  /// The uid of the invitation
  ///
  /// @param this_ the object handle
  ffi.Pointer<ffi.Char> etebase_signed_invitation_get_uid(
    ffi.Pointer<EtebaseSignedInvitation> this_,
  ) {
    return _etebase_signed_invitation_get_uid(
      this_,
    );
  }

  late final _etebase_signed_invitation_get_uidPtr = _lookup<
          ffi.NativeFunction<
              ffi.Pointer<ffi.Char> Function(
                  ffi.Pointer<EtebaseSignedInvitation>)>>(
      'etebase_signed_invitation_get_uid');
  late final _etebase_signed_invitation_get_uid =
      _etebase_signed_invitation_get_uidPtr.asFunction<
          ffi.Pointer<ffi.Char> Function(
              ffi.Pointer<EtebaseSignedInvitation>)>();

  /// The username this invitation is for
  ///
  /// @param this_ the object handle
  ffi.Pointer<ffi.Char> etebase_signed_invitation_get_username(
    ffi.Pointer<EtebaseSignedInvitation> this_,
  ) {
    return _etebase_signed_invitation_get_username(
      this_,
    );
  }

  late final _etebase_signed_invitation_get_usernamePtr = _lookup<
          ffi.NativeFunction<
              ffi.Pointer<ffi.Char> Function(
                  ffi.Pointer<EtebaseSignedInvitation>)>>(
      'etebase_signed_invitation_get_username');
  late final _etebase_signed_invitation_get_username =
      _etebase_signed_invitation_get_usernamePtr.asFunction<
          ffi.Pointer<ffi.Char> Function(
              ffi.Pointer<EtebaseSignedInvitation>)>();

  /// The uid of the collection this invitation is for
  ///
  /// @param this_ the object handle
  ffi.Pointer<ffi.Char> etebase_signed_invitation_get_collection(
    ffi.Pointer<EtebaseSignedInvitation> this_,
  ) {
    return _etebase_signed_invitation_get_collection(
      this_,
    );
  }

  late final _etebase_signed_invitation_get_collectionPtr = _lookup<
          ffi.NativeFunction<
              ffi.Pointer<ffi.Char> Function(
                  ffi.Pointer<EtebaseSignedInvitation>)>>(
      'etebase_signed_invitation_get_collection');
  late final _etebase_signed_invitation_get_collection =
      _etebase_signed_invitation_get_collectionPtr.asFunction<
          ffi.Pointer<ffi.Char> Function(
              ffi.Pointer<EtebaseSignedInvitation>)>();

  /// The access level offered in this invitation
  ///
  /// @param this_ the object handle
  int etebase_signed_invitation_get_access_level(
    ffi.Pointer<EtebaseSignedInvitation> this_,
  ) {
    return _etebase_signed_invitation_get_access_level(
      this_,
    );
  }

  late final _etebase_signed_invitation_get_access_levelPtr = _lookup<
          ffi.NativeFunction<
              EtebaseCollectionAccessLevel Function(
                  ffi.Pointer<EtebaseSignedInvitation>)>>(
      'etebase_signed_invitation_get_access_level');
  late final _etebase_signed_invitation_get_access_level =
      _etebase_signed_invitation_get_access_levelPtr
          .asFunction<int Function(ffi.Pointer<EtebaseSignedInvitation>)>();

  /// The username this invitation is from
  ///
  /// @param this_ the object handle
  ffi.Pointer<ffi.Void> etebase_signed_invitation_get_from_username(
    ffi.Pointer<EtebaseSignedInvitation> this_,
  ) {
    return _etebase_signed_invitation_get_from_username(
      this_,
    );
  }

  late final _etebase_signed_invitation_get_from_usernamePtr = _lookup<
          ffi.NativeFunction<
              ffi.Pointer<ffi.Void> Function(
                  ffi.Pointer<EtebaseSignedInvitation>)>>(
      'etebase_signed_invitation_get_from_username');
  late final _etebase_signed_invitation_get_from_username =
      _etebase_signed_invitation_get_from_usernamePtr.asFunction<
          ffi.Pointer<ffi.Void> Function(
              ffi.Pointer<EtebaseSignedInvitation>)>();

  /// The public key of the inviting user
  ///
  /// @param this_ the object handle
  ffi.Pointer<ffi.Void> etebase_signed_invitation_get_from_pubkey(
    ffi.Pointer<EtebaseSignedInvitation> this_,
  ) {
    return _etebase_signed_invitation_get_from_pubkey(
      this_,
    );
  }

  late final _etebase_signed_invitation_get_from_pubkeyPtr = _lookup<
          ffi.NativeFunction<
              ffi.Pointer<ffi.Void> Function(
                  ffi.Pointer<EtebaseSignedInvitation>)>>(
      'etebase_signed_invitation_get_from_pubkey');
  late final _etebase_signed_invitation_get_from_pubkey =
      _etebase_signed_invitation_get_from_pubkeyPtr.asFunction<
          ffi.Pointer<ffi.Void> Function(
              ffi.Pointer<EtebaseSignedInvitation>)>();

  /// The size of the public key of the inviting user
  ///
  /// @param this_ the object handle
  int etebase_signed_invitation_get_from_pubkey_size(
    ffi.Pointer<EtebaseSignedInvitation> this_,
  ) {
    return _etebase_signed_invitation_get_from_pubkey_size(
      this_,
    );
  }

  late final _etebase_signed_invitation_get_from_pubkey_sizePtr = _lookup<
          ffi.NativeFunction<
              ffi.UintPtr Function(ffi.Pointer<EtebaseSignedInvitation>)>>(
      'etebase_signed_invitation_get_from_pubkey_size');
  late final _etebase_signed_invitation_get_from_pubkey_size =
      _etebase_signed_invitation_get_from_pubkey_sizePtr
          .asFunction<int Function(ffi.Pointer<EtebaseSignedInvitation>)>();

  /// Destroy the object
  ///
  /// @param this_ the object handle
  void etebase_signed_invitation_destroy(
    ffi.Pointer<EtebaseSignedInvitation> this_,
  ) {
    return _etebase_signed_invitation_destroy(
      this_,
    );
  }

  late final _etebase_signed_invitation_destroyPtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(ffi.Pointer<EtebaseSignedInvitation>)>>(
      'etebase_signed_invitation_destroy');
  late final _etebase_signed_invitation_destroy =
      _etebase_signed_invitation_destroyPtr
          .asFunction<void Function(ffi.Pointer<EtebaseSignedInvitation>)>();

  /// Clone the object
  ///
  /// @param this_ the object handle
  ffi.Pointer<EtebaseCollectionMember> etebase_collection_member_clone(
    ffi.Pointer<EtebaseCollectionMember> this_,
  ) {
    return _etebase_collection_member_clone(
      this_,
    );
  }

  late final _etebase_collection_member_clonePtr = _lookup<
          ffi.NativeFunction<
              ffi.Pointer<EtebaseCollectionMember> Function(
                  ffi.Pointer<EtebaseCollectionMember>)>>(
      'etebase_collection_member_clone');
  late final _etebase_collection_member_clone =
      _etebase_collection_member_clonePtr.asFunction<
          ffi.Pointer<EtebaseCollectionMember> Function(
              ffi.Pointer<EtebaseCollectionMember>)>();

  /// The username of a member
  ///
  /// @param this_ the object handle
  ffi.Pointer<ffi.Char> etebase_collection_member_get_username(
    ffi.Pointer<EtebaseCollectionMember> this_,
  ) {
    return _etebase_collection_member_get_username(
      this_,
    );
  }

  late final _etebase_collection_member_get_usernamePtr = _lookup<
          ffi.NativeFunction<
              ffi.Pointer<ffi.Char> Function(
                  ffi.Pointer<EtebaseCollectionMember>)>>(
      'etebase_collection_member_get_username');
  late final _etebase_collection_member_get_username =
      _etebase_collection_member_get_usernamePtr.asFunction<
          ffi.Pointer<ffi.Char> Function(
              ffi.Pointer<EtebaseCollectionMember>)>();

  /// The access_level of the member
  ///
  /// @param this_ the object handle
  int etebase_collection_member_get_access_level(
    ffi.Pointer<EtebaseCollectionMember> this_,
  ) {
    return _etebase_collection_member_get_access_level(
      this_,
    );
  }

  late final _etebase_collection_member_get_access_levelPtr = _lookup<
          ffi.NativeFunction<
              EtebaseCollectionAccessLevel Function(
                  ffi.Pointer<EtebaseCollectionMember>)>>(
      'etebase_collection_member_get_access_level');
  late final _etebase_collection_member_get_access_level =
      _etebase_collection_member_get_access_levelPtr
          .asFunction<int Function(ffi.Pointer<EtebaseCollectionMember>)>();

  /// Destroy the object
  ///
  /// @param this_ the object handle
  void etebase_collection_member_destroy(
    ffi.Pointer<EtebaseCollectionMember> this_,
  ) {
    return _etebase_collection_member_destroy(
      this_,
    );
  }

  late final _etebase_collection_member_destroyPtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(ffi.Pointer<EtebaseCollectionMember>)>>(
      'etebase_collection_member_destroy');
  late final _etebase_collection_member_destroy =
      _etebase_collection_member_destroyPtr
          .asFunction<void Function(ffi.Pointer<EtebaseCollectionMember>)>();

  /// Iterator for the list response
  ///
  /// @param this_ the object handle
  ffi.Pointer<ffi.Char> etebase_member_list_response_get_iterator(
    ffi.Pointer<EtebaseMemberListResponse> this_,
  ) {
    return _etebase_member_list_response_get_iterator(
      this_,
    );
  }

  late final _etebase_member_list_response_get_iteratorPtr = _lookup<
          ffi.NativeFunction<
              ffi.Pointer<ffi.Char> Function(
                  ffi.Pointer<EtebaseMemberListResponse>)>>(
      'etebase_member_list_response_get_iterator');
  late final _etebase_member_list_response_get_iterator =
      _etebase_member_list_response_get_iteratorPtr.asFunction<
          ffi.Pointer<ffi.Char> Function(
              ffi.Pointer<EtebaseMemberListResponse>)>();

  /// List of collection members included in the response
  ///
  /// @param this_ the object handle
  /// @param[out] data the array to store the collection members in
  int etebase_member_list_response_get_data(
    ffi.Pointer<EtebaseMemberListResponse> this_,
    ffi.Pointer<ffi.Pointer<EtebaseCollectionMember>> data,
  ) {
    return _etebase_member_list_response_get_data(
      this_,
      data,
    );
  }

  late final _etebase_member_list_response_get_dataPtr = _lookup<
          ffi.NativeFunction<
              ffi.Int32 Function(ffi.Pointer<EtebaseMemberListResponse>,
                  ffi.Pointer<ffi.Pointer<EtebaseCollectionMember>>)>>(
      'etebase_member_list_response_get_data');
  late final _etebase_member_list_response_get_data =
      _etebase_member_list_response_get_dataPtr.asFunction<
          int Function(ffi.Pointer<EtebaseMemberListResponse>,
              ffi.Pointer<ffi.Pointer<EtebaseCollectionMember>>)>();

  /// The number of collection members included in the response
  ///
  /// @param this_ the object handle
  int etebase_member_list_response_get_data_length(
    ffi.Pointer<EtebaseMemberListResponse> this_,
  ) {
    return _etebase_member_list_response_get_data_length(
      this_,
    );
  }

  late final _etebase_member_list_response_get_data_lengthPtr = _lookup<
          ffi.NativeFunction<
              ffi.UintPtr Function(ffi.Pointer<EtebaseMemberListResponse>)>>(
      'etebase_member_list_response_get_data_length');
  late final _etebase_member_list_response_get_data_length =
      _etebase_member_list_response_get_data_lengthPtr
          .asFunction<int Function(ffi.Pointer<EtebaseMemberListResponse>)>();

  /// Indicates whether there is no more data to fetch
  ///
  /// @param this_ the object handle
  bool etebase_member_list_response_is_done(
    ffi.Pointer<EtebaseMemberListResponse> this_,
  ) {
    return _etebase_member_list_response_is_done(
      this_,
    );
  }

  late final _etebase_member_list_response_is_donePtr = _lookup<
          ffi.NativeFunction<
              ffi.Bool Function(ffi.Pointer<EtebaseMemberListResponse>)>>(
      'etebase_member_list_response_is_done');
  late final _etebase_member_list_response_is_done =
      _etebase_member_list_response_is_donePtr
          .asFunction<bool Function(ffi.Pointer<EtebaseMemberListResponse>)>();

  /// Destroy the object
  ///
  /// @param this_ the object handle
  void etebase_member_list_response_destroy(
    ffi.Pointer<EtebaseMemberListResponse> this_,
  ) {
    return _etebase_member_list_response_destroy(
      this_,
    );
  }

  late final _etebase_member_list_response_destroyPtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(ffi.Pointer<EtebaseMemberListResponse>)>>(
      'etebase_member_list_response_destroy');
  late final _etebase_member_list_response_destroy =
      _etebase_member_list_response_destroyPtr
          .asFunction<void Function(ffi.Pointer<EtebaseMemberListResponse>)>();

  /// List the members of a collection
  ///
  /// @param this_ the object handle
  /// @param fetch_options the `EtebaseFetchOptions` to fetch with
  ffi.Pointer<EtebaseMemberListResponse> etebase_collection_member_manager_list(
    ffi.Pointer<EtebaseCollectionMemberManager> this_,
    ffi.Pointer<EtebaseFetchOptions> fetch_options,
  ) {
    return _etebase_collection_member_manager_list(
      this_,
      fetch_options,
    );
  }

  late final _etebase_collection_member_manager_listPtr = _lookup<
          ffi.NativeFunction<
              ffi.Pointer<EtebaseMemberListResponse> Function(
                  ffi.Pointer<EtebaseCollectionMemberManager>,
                  ffi.Pointer<EtebaseFetchOptions>)>>(
      'etebase_collection_member_manager_list');
  late final _etebase_collection_member_manager_list =
      _etebase_collection_member_manager_listPtr.asFunction<
          ffi.Pointer<EtebaseMemberListResponse> Function(
              ffi.Pointer<EtebaseCollectionMemberManager>,
              ffi.Pointer<EtebaseFetchOptions>)>();

  /// Remove a member from the collection
  ///
  /// @param this_ the object handle
  /// @param username the member's username
  int etebase_collection_member_manager_remove(
    ffi.Pointer<EtebaseCollectionMemberManager> this_,
    ffi.Pointer<ffi.Char> username,
  ) {
    return _etebase_collection_member_manager_remove(
      this_,
      username,
    );
  }

  late final _etebase_collection_member_manager_removePtr = _lookup<
          ffi.NativeFunction<
              ffi.Int32 Function(ffi.Pointer<EtebaseCollectionMemberManager>,
                  ffi.Pointer<ffi.Char>)>>(
      'etebase_collection_member_manager_remove');
  late final _etebase_collection_member_manager_remove =
      _etebase_collection_member_manager_removePtr.asFunction<
          int Function(ffi.Pointer<EtebaseCollectionMemberManager>,
              ffi.Pointer<ffi.Char>)>();

  /// Leave a collection the user is a member of
  ///
  /// @param this_ the object handle
  int etebase_collection_member_manager_leave(
    ffi.Pointer<EtebaseCollectionMemberManager> this_,
  ) {
    return _etebase_collection_member_manager_leave(
      this_,
    );
  }

  late final _etebase_collection_member_manager_leavePtr = _lookup<
          ffi.NativeFunction<
              ffi.Int32 Function(ffi.Pointer<EtebaseCollectionMemberManager>)>>(
      'etebase_collection_member_manager_leave');
  late final _etebase_collection_member_manager_leave =
      _etebase_collection_member_manager_leavePtr.asFunction<
          int Function(ffi.Pointer<EtebaseCollectionMemberManager>)>();

  /// Modify the access level of a member
  ///
  /// @param this_ the object handle
  /// @param username the member's username
  /// @param access_level the new `EtebaseCollectionAccessLevel`
  int etebase_collection_member_manager_modify_access_level(
    ffi.Pointer<EtebaseCollectionMemberManager> this_,
    ffi.Pointer<ffi.Char> username,
    int access_level,
  ) {
    return _etebase_collection_member_manager_modify_access_level(
      this_,
      username,
      access_level,
    );
  }

  late final _etebase_collection_member_manager_modify_access_levelPtr =
      _lookup<
              ffi.NativeFunction<
                  ffi.Int32 Function(
                      ffi.Pointer<EtebaseCollectionMemberManager>,
                      ffi.Pointer<ffi.Char>,
                      EtebaseCollectionAccessLevel)>>(
          'etebase_collection_member_manager_modify_access_level');
  late final _etebase_collection_member_manager_modify_access_level =
      _etebase_collection_member_manager_modify_access_levelPtr.asFunction<
          int Function(ffi.Pointer<EtebaseCollectionMemberManager>,
              ffi.Pointer<ffi.Char>, int)>();

  /// Destroy the object
  ///
  /// @param this_ the object handle
  void etebase_collection_member_manager_destroy(
    ffi.Pointer<EtebaseCollectionMemberManager> this_,
  ) {
    return _etebase_collection_member_manager_destroy(
      this_,
    );
  }

  late final _etebase_collection_member_manager_destroyPtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(ffi.Pointer<EtebaseCollectionMemberManager>)>>(
      'etebase_collection_member_manager_destroy');
  late final _etebase_collection_member_manager_destroy =
      _etebase_collection_member_manager_destroyPtr.asFunction<
          void Function(ffi.Pointer<EtebaseCollectionMemberManager>)>();

  /// Initialize a file system cache object
  ///
  /// Should be destroyed with `etebase_fs_cache_destroy`
  ///
  /// @param path the path to a directory to store cache in
  /// @param username username of the user to cache data for
  ffi.Pointer<EtebaseFileSystemCache> etebase_fs_cache_new(
    ffi.Pointer<ffi.Char> path,
    ffi.Pointer<ffi.Char> username,
  ) {
    return _etebase_fs_cache_new(
      path,
      username,
    );
  }

  late final _etebase_fs_cache_newPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<EtebaseFileSystemCache> Function(ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Char>)>>('etebase_fs_cache_new');
  late final _etebase_fs_cache_new = _etebase_fs_cache_newPtr.asFunction<
      ffi.Pointer<EtebaseFileSystemCache> Function(
          ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>();

  /// Clear all cache for the user
  ///
  /// @param this_ the object handle
  int etebase_fs_cache_clear_user(
    ffi.Pointer<EtebaseFileSystemCache> this_,
  ) {
    return _etebase_fs_cache_clear_user(
      this_,
    );
  }

  late final _etebase_fs_cache_clear_userPtr = _lookup<
          ffi.NativeFunction<
              ffi.Int32 Function(ffi.Pointer<EtebaseFileSystemCache>)>>(
      'etebase_fs_cache_clear_user');
  late final _etebase_fs_cache_clear_user = _etebase_fs_cache_clear_userPtr
      .asFunction<int Function(ffi.Pointer<EtebaseFileSystemCache>)>();

  /// Save the user account
  ///
  /// Load it later using `etebase_fs_cache_load_account`
  ///
  /// @param this_ the object handle
  /// @param etebase the account to save
  /// @param encryption_key used to encrypt the saved account string to enhance security
  /// @param encryption_key_size the size of the encryption_key
  int etebase_fs_cache_save_account(
    ffi.Pointer<EtebaseFileSystemCache> this_,
    ffi.Pointer<EtebaseAccount> etebase,
    ffi.Pointer<ffi.Void> encryption_key,
    int encryption_key_size,
  ) {
    return _etebase_fs_cache_save_account(
      this_,
      etebase,
      encryption_key,
      encryption_key_size,
    );
  }

  late final _etebase_fs_cache_save_accountPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(
              ffi.Pointer<EtebaseFileSystemCache>,
              ffi.Pointer<EtebaseAccount>,
              ffi.Pointer<ffi.Void>,
              ffi.UintPtr)>>('etebase_fs_cache_save_account');
  late final _etebase_fs_cache_save_account =
      _etebase_fs_cache_save_accountPtr.asFunction<
          int Function(ffi.Pointer<EtebaseFileSystemCache>,
              ffi.Pointer<EtebaseAccount>, ffi.Pointer<ffi.Void>, int)>();

  /// Load the account object from cache
  ///
  /// @param this_ the object handle
  /// @param client the already setup [Client] object
  /// @param encryption_key the same encryption key passed to [Self::save_account] while saving the account
  /// @param encryption_key_size the size of the encryption_key
  ffi.Pointer<EtebaseAccount> etebase_fs_cache_load_account(
    ffi.Pointer<EtebaseFileSystemCache> this_,
    ffi.Pointer<EtebaseClient> client,
    ffi.Pointer<ffi.Void> encryption_key,
    int encryption_key_size,
  ) {
    return _etebase_fs_cache_load_account(
      this_,
      client,
      encryption_key,
      encryption_key_size,
    );
  }

  late final _etebase_fs_cache_load_accountPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<EtebaseAccount> Function(
              ffi.Pointer<EtebaseFileSystemCache>,
              ffi.Pointer<EtebaseClient>,
              ffi.Pointer<ffi.Void>,
              ffi.UintPtr)>>('etebase_fs_cache_load_account');
  late final _etebase_fs_cache_load_account =
      _etebase_fs_cache_load_accountPtr.asFunction<
          ffi.Pointer<EtebaseAccount> Function(
              ffi.Pointer<EtebaseFileSystemCache>,
              ffi.Pointer<EtebaseClient>,
              ffi.Pointer<ffi.Void>,
              int)>();

  /// Save the collection list sync token
  ///
  /// @param this_ the object handle
  /// @param stoken the sync token to be saved
  int etebase_fs_cache_save_stoken(
    ffi.Pointer<EtebaseFileSystemCache> this_,
    ffi.Pointer<ffi.Char> stoken,
  ) {
    return _etebase_fs_cache_save_stoken(
      this_,
      stoken,
    );
  }

  late final _etebase_fs_cache_save_stokenPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Pointer<EtebaseFileSystemCache>,
              ffi.Pointer<ffi.Char>)>>('etebase_fs_cache_save_stoken');
  late final _etebase_fs_cache_save_stoken =
      _etebase_fs_cache_save_stokenPtr.asFunction<
          int Function(
              ffi.Pointer<EtebaseFileSystemCache>, ffi.Pointer<ffi.Char>)>();

  /// Load the collection list sync token from cache
  ///
  /// @param this_ the object handle
  ffi.Pointer<ffi.Char> etebase_fs_cache_load_stoken(
    ffi.Pointer<EtebaseFileSystemCache> this_,
  ) {
    return _etebase_fs_cache_load_stoken(
      this_,
    );
  }

  late final _etebase_fs_cache_load_stokenPtr = _lookup<
          ffi.NativeFunction<
              ffi.Pointer<ffi.Char> Function(
                  ffi.Pointer<EtebaseFileSystemCache>)>>(
      'etebase_fs_cache_load_stoken');
  late final _etebase_fs_cache_load_stoken =
      _etebase_fs_cache_load_stokenPtr.asFunction<
          ffi.Pointer<ffi.Char> Function(
              ffi.Pointer<EtebaseFileSystemCache>)>();

  /// Save a collection's sync token
  ///
  /// @param this_ the object handle
  /// @param col_uid the UID of the collection
  /// @param stoken the sync token to be saved
  int etebase_fs_cache_collection_save_stoken(
    ffi.Pointer<EtebaseFileSystemCache> this_,
    ffi.Pointer<ffi.Char> col_uid,
    ffi.Pointer<ffi.Char> stoken,
  ) {
    return _etebase_fs_cache_collection_save_stoken(
      this_,
      col_uid,
      stoken,
    );
  }

  late final _etebase_fs_cache_collection_save_stokenPtr = _lookup<
          ffi.NativeFunction<
              ffi.Int32 Function(ffi.Pointer<EtebaseFileSystemCache>,
                  ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>>(
      'etebase_fs_cache_collection_save_stoken');
  late final _etebase_fs_cache_collection_save_stoken =
      _etebase_fs_cache_collection_save_stokenPtr.asFunction<
          int Function(ffi.Pointer<EtebaseFileSystemCache>,
              ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>();

  /// Load the sync token for a collection
  ///
  /// @param this_ the object handle
  /// @param col_uid the UID of the collection
  ffi.Pointer<ffi.Char> etebase_fs_cache_collection_load_stoken(
    ffi.Pointer<EtebaseFileSystemCache> this_,
    ffi.Pointer<ffi.Char> col_uid,
  ) {
    return _etebase_fs_cache_collection_load_stoken(
      this_,
      col_uid,
    );
  }

  late final _etebase_fs_cache_collection_load_stokenPtr = _lookup<
          ffi.NativeFunction<
              ffi.Pointer<ffi.Char> Function(
                  ffi.Pointer<EtebaseFileSystemCache>, ffi.Pointer<ffi.Char>)>>(
      'etebase_fs_cache_collection_load_stoken');
  late final _etebase_fs_cache_collection_load_stoken =
      _etebase_fs_cache_collection_load_stokenPtr.asFunction<
          ffi.Pointer<ffi.Char> Function(
              ffi.Pointer<EtebaseFileSystemCache>, ffi.Pointer<ffi.Char>)>();

  /// Save a collection to cache
  ///
  /// @param this_ the object handle
  /// @param col_mgr collection manager for the account
  /// @param col the collection to be saved
  int etebase_fs_cache_collection_set(
    ffi.Pointer<EtebaseFileSystemCache> this_,
    ffi.Pointer<EtebaseCollectionManager> col_mgr,
    ffi.Pointer<EtebaseCollection> col,
  ) {
    return _etebase_fs_cache_collection_set(
      this_,
      col_mgr,
      col,
    );
  }

  late final _etebase_fs_cache_collection_setPtr = _lookup<
          ffi.NativeFunction<
              ffi.Int32 Function(
                  ffi.Pointer<EtebaseFileSystemCache>,
                  ffi.Pointer<EtebaseCollectionManager>,
                  ffi.Pointer<EtebaseCollection>)>>(
      'etebase_fs_cache_collection_set');
  late final _etebase_fs_cache_collection_set =
      _etebase_fs_cache_collection_setPtr.asFunction<
          int Function(
              ffi.Pointer<EtebaseFileSystemCache>,
              ffi.Pointer<EtebaseCollectionManager>,
              ffi.Pointer<EtebaseCollection>)>();

  /// Remove a collection from cache
  ///
  /// @param this_ the object handle
  /// @param col_mgr collection manager for the account
  /// @param col_uid the UID of the collection to remove
  int etebase_fs_cache_collection_unset(
    ffi.Pointer<EtebaseFileSystemCache> this_,
    ffi.Pointer<EtebaseCollectionManager> col_mgr,
    ffi.Pointer<ffi.Char> col_uid,
  ) {
    return _etebase_fs_cache_collection_unset(
      this_,
      col_mgr,
      col_uid,
    );
  }

  late final _etebase_fs_cache_collection_unsetPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(
              ffi.Pointer<EtebaseFileSystemCache>,
              ffi.Pointer<EtebaseCollectionManager>,
              ffi.Pointer<ffi.Char>)>>('etebase_fs_cache_collection_unset');
  late final _etebase_fs_cache_collection_unset =
      _etebase_fs_cache_collection_unsetPtr.asFunction<
          int Function(ffi.Pointer<EtebaseFileSystemCache>,
              ffi.Pointer<EtebaseCollectionManager>, ffi.Pointer<ffi.Char>)>();

  /// Load a collection from cache
  ///
  /// @param this_ the object handle
  /// @param col_mgr collection manager for the account
  /// @param col_uid the UID of the collection
  ffi.Pointer<EtebaseCollection> etebase_fs_cache_collection_get(
    ffi.Pointer<EtebaseFileSystemCache> this_,
    ffi.Pointer<EtebaseCollectionManager> col_mgr,
    ffi.Pointer<ffi.Char> col_uid,
  ) {
    return _etebase_fs_cache_collection_get(
      this_,
      col_mgr,
      col_uid,
    );
  }

  late final _etebase_fs_cache_collection_getPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<EtebaseCollection> Function(
              ffi.Pointer<EtebaseFileSystemCache>,
              ffi.Pointer<EtebaseCollectionManager>,
              ffi.Pointer<ffi.Char>)>>('etebase_fs_cache_collection_get');
  late final _etebase_fs_cache_collection_get =
      _etebase_fs_cache_collection_getPtr.asFunction<
          ffi.Pointer<EtebaseCollection> Function(
              ffi.Pointer<EtebaseFileSystemCache>,
              ffi.Pointer<EtebaseCollectionManager>,
              ffi.Pointer<ffi.Char>)>();

  /// Save an item to cache
  ///
  /// @param this_ the object handle
  /// @param item_mgr item manager for the parent collection
  /// @param col_uid the UID of the parent collection
  /// @param item the item to be saved
  int etebase_fs_cache_item_set(
    ffi.Pointer<EtebaseFileSystemCache> this_,
    ffi.Pointer<EtebaseItemManager> item_mgr,
    ffi.Pointer<ffi.Char> col_uid,
    ffi.Pointer<EtebaseItem> item,
  ) {
    return _etebase_fs_cache_item_set(
      this_,
      item_mgr,
      col_uid,
      item,
    );
  }

  late final _etebase_fs_cache_item_setPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(
              ffi.Pointer<EtebaseFileSystemCache>,
              ffi.Pointer<EtebaseItemManager>,
              ffi.Pointer<ffi.Char>,
              ffi.Pointer<EtebaseItem>)>>('etebase_fs_cache_item_set');
  late final _etebase_fs_cache_item_set =
      _etebase_fs_cache_item_setPtr.asFunction<
          int Function(
              ffi.Pointer<EtebaseFileSystemCache>,
              ffi.Pointer<EtebaseItemManager>,
              ffi.Pointer<ffi.Char>,
              ffi.Pointer<EtebaseItem>)>();

  /// Remove an item from cache
  ///
  /// @param this_ the object handle
  /// @param item_mgr item manager for the parent collection
  /// @param col_uid the UID of the parent collection
  /// @param item_uid the UID of the item
  int etebase_fs_cache_item_unset(
    ffi.Pointer<EtebaseFileSystemCache> this_,
    ffi.Pointer<EtebaseItemManager> item_mgr,
    ffi.Pointer<ffi.Char> col_uid,
    ffi.Pointer<ffi.Char> item_uid,
  ) {
    return _etebase_fs_cache_item_unset(
      this_,
      item_mgr,
      col_uid,
      item_uid,
    );
  }

  late final _etebase_fs_cache_item_unsetPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(
              ffi.Pointer<EtebaseFileSystemCache>,
              ffi.Pointer<EtebaseItemManager>,
              ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Char>)>>('etebase_fs_cache_item_unset');
  late final _etebase_fs_cache_item_unset =
      _etebase_fs_cache_item_unsetPtr.asFunction<
          int Function(
              ffi.Pointer<EtebaseFileSystemCache>,
              ffi.Pointer<EtebaseItemManager>,
              ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Char>)>();

  /// Load an item from cache
  ///
  /// @param this_ the object handle
  /// @param item_mgr item manager for the parent collection
  /// @param col_uid the UID of the parent collection
  /// @param item_uid the UID of the item
  ffi.Pointer<EtebaseItem> etebase_fs_cache_item_get(
    ffi.Pointer<EtebaseFileSystemCache> this_,
    ffi.Pointer<EtebaseItemManager> item_mgr,
    ffi.Pointer<ffi.Char> col_uid,
    ffi.Pointer<ffi.Char> item_uid,
  ) {
    return _etebase_fs_cache_item_get(
      this_,
      item_mgr,
      col_uid,
      item_uid,
    );
  }

  late final _etebase_fs_cache_item_getPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<EtebaseItem> Function(
              ffi.Pointer<EtebaseFileSystemCache>,
              ffi.Pointer<EtebaseItemManager>,
              ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Char>)>>('etebase_fs_cache_item_get');
  late final _etebase_fs_cache_item_get =
      _etebase_fs_cache_item_getPtr.asFunction<
          ffi.Pointer<EtebaseItem> Function(
              ffi.Pointer<EtebaseFileSystemCache>,
              ffi.Pointer<EtebaseItemManager>,
              ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Char>)>();

  /// Destroy the object
  ///
  /// @param this_ the object handle
  void etebase_fs_cache_destroy(
    ffi.Pointer<EtebaseFileSystemCache> this_,
  ) {
    return _etebase_fs_cache_destroy(
      this_,
    );
  }

  late final _etebase_fs_cache_destroyPtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(ffi.Pointer<EtebaseFileSystemCache>)>>(
      'etebase_fs_cache_destroy');
  late final _etebase_fs_cache_destroy = _etebase_fs_cache_destroyPtr
      .asFunction<void Function(ffi.Pointer<EtebaseFileSystemCache>)>();
}

final class EtebaseAccount extends ffi.Opaque {}

final class EtebaseClient extends ffi.Opaque {}

final class EtebaseCollection extends ffi.Opaque {}

final class EtebaseCollectionInvitationManager extends ffi.Opaque {}

final class EtebaseCollectionListResponse_Collection extends ffi.Opaque {}

final class EtebaseCollectionManager extends ffi.Opaque {}

final class EtebaseCollectionMember extends ffi.Opaque {}

final class EtebaseCollectionMemberManager extends ffi.Opaque {}

final class EtebaseFetchOptions extends ffi.Opaque {}

final class EtebaseFileSystemCache extends ffi.Opaque {}

final class EtebaseItem extends ffi.Opaque {}

final class EtebaseItemListResponse_Item extends ffi.Opaque {}

final class EtebaseItemManager extends ffi.Opaque {}

final class EtebaseItemMetadata extends ffi.Opaque {}

final class EtebaseIteratorListResponse_CollectionMember extends ffi.Opaque {}

final class EtebaseIteratorListResponse_Item extends ffi.Opaque {}

final class EtebaseIteratorListResponse_SignedInvitation extends ffi.Opaque {}

final class EtebaseRemovedCollection extends ffi.Opaque {}

final class EtebaseSignedInvitation extends ffi.Opaque {}

final class EtebaseUser extends ffi.Opaque {}

final class EtebaseUserProfile extends ffi.Opaque {}

typedef EtebaseErrorCode = ffi.Uint32;
typedef DartEtebaseErrorCode = int;
typedef EtebaseCollectionListResponse
    = EtebaseCollectionListResponse_Collection;
typedef EtebaseItemListResponse = EtebaseItemListResponse_Item;
typedef EtebaseItemRevisionsListResponse = EtebaseIteratorListResponse_Item;
typedef EtebasePrefetchOption = ffi.Uint32;
typedef DartEtebasePrefetchOption = int;
typedef EtebaseCollectionAccessLevel = ffi.Uint32;
typedef DartEtebaseCollectionAccessLevel = int;
typedef EtebaseInvitationListResponse
    = EtebaseIteratorListResponse_SignedInvitation;
typedef EtebaseMemberListResponse
    = EtebaseIteratorListResponse_CollectionMember;
